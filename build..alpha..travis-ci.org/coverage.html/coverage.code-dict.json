{"/home/travis/build/npmtest/node-npmtest-angular2-modal/test.js":"/* istanbul instrument in package npmtest_angular2_modal */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-angular2-modal/lib.npmtest_angular2_modal.js":"/* istanbul instrument in package npmtest_angular2_modal */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_angular2_modal = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_angular2_modal = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-angular2-modal/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-angular2-modal && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_angular2_modal */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_angular2_modal\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_angular2_modal.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_angular2_modal.rollup.js'] =\n            local.assetsDict['/assets.npmtest_angular2_modal.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_angular2_modal.__dirname + '/lib.npmtest_angular2_modal.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-angular2-modal/node_modules/angular2-modal/bundles/angular2-modal.umd.js":"(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs/Subject'), require('rxjs/add/operator/filter'), require('@angular/platform-browser')) :\n        typeof define === 'function' && define.amd ? define(['exports', '@angular/core', 'rxjs/Subject', 'rxjs/add/operator/filter', '@angular/platform-browser'], factory) :\n            (factory((global.angular2Modal = global.angular2Modal || {}), global.ng.core, global.Rx, global.rxjs_add_operator_filter, global.ng.platformBrowser));\n}(this, (function (exports, _angular_core, rxjs_Subject, rxjs_add_operator_filter, _angular_platformBrowser) {\n    'use strict';\n    var PRIVATE_PREFIX = '$$';\n    var RESERVED_REGEX = /^(\\$\\$).*/;\n    function validateMethodName(name) {\n        if (!name) {\n            throw new Error(\"Illegal method name. Empty method name is not allowed\");\n        }\n        else if (name in this) {\n            throw new Error(\"A member name '\" + name + \"' already defined.\");\n        }\n    }\n    /**\n     * Returns a list of assigned property names (non private)\n     * @param subject\n     * @returns {string[]}\n     */\n    function getAssignedPropertyNames(subject) {\n        return Object.getOwnPropertyNames(subject)\n            .filter(function (name) { return RESERVED_REGEX.test(name); })\n            .map(function (name) { return name.substr(2); });\n    }\n    function privateKey(name) {\n        return PRIVATE_PREFIX + name;\n    }\n    function objectDefinePropertyValue(obj, propertyName, value) {\n        Object.defineProperty(obj, propertyName, {\n            configurable: false,\n            enumerable: false,\n            writable: false,\n            value: value\n        });\n    }\n    /**\n     * Given a FluentAssign instance, apply all of the supplied default values so calling\n     * instance.toJSON will return those values (does not create a setter function)\n     * @param instance\n     * @param defaultValues\n     */\n    function applyDefaultValues(instance, defaultValues) {\n        Object.getOwnPropertyNames(defaultValues)\n            .forEach(function (name) { return instance[privateKey(name)] = defaultValues[name]; });\n    }\n    /**\n     * Create a function for setting a value for a property on a given object.\n     * @param obj The object to apply the key & setter on.\n     * @param propertyName The name of the property on the object\n     * @param writeOnce If true will allow writing once (default: false)\n     *\n     * Example:\n     * let obj = new FluentAssign<any>;\n     * setAssignMethod(obj, 'myProp');\n     * obj.myProp('someValue');\n     * const result = obj.toJSON();\n     * console.log(result); //{ myProp: 'someValue' }\n     *\n     *\n     * let obj = new FluentAssign<any>;\n     * setAssignMethod(obj, 'myProp', true); // applying writeOnce\n     * obj.myProp('someValue');\n     * obj.myProp('someValue'); // ERROR: Overriding config property 'myProp' is not allowed.\n     */\n    function setAssignMethod(obj, propertyName, writeOnce) {\n        var _this = this;\n        if (writeOnce === void 0) {\n            writeOnce = false;\n        }\n        validateMethodName.call(obj, propertyName);\n        var key = privateKey(propertyName);\n        objectDefinePropertyValue(obj, propertyName, function (value) {\n            if (writeOnce && _this.hasOwnProperty(key)) {\n                throw new Error(\"Overriding config property '\" + propertyName + \"' is not allowed.\");\n            }\n            obj[key] = value;\n            return obj;\n        });\n    }\n    /**\n     * Create a function for setting a value that is an alias to an other setter function.\n     * @param obj The object to apply the key & setter on.\n     * @param propertyName The name of the property on the object\n     * @param srcPropertyName The name of the property on the object this alias points to\n     * @param hard If true, will set a readonly property on the object that returns\n     *        the value of the source property. Default: false\n     *\n     * Example:\n     * let obj = new FluentAssign<any> ;\n     * setAssignMethod(obj, 'myProp');\n     * setAssignAlias(obj, 'myPropAlias', 'myProp');\n     * obj.myPropAlias('someValue');\n     * const result = obj.toJSON();\n     * console.log(result); //{ myProp: 'someValue' }\n     * result.myPropAlias // undefined\n     *\n     *\n     * let obj = new FluentAssign<any> ;\n     * setAssignMethod(obj, 'myProp');\n     * setAssignAlias(obj, 'myPropAlias', 'myProp', true); // setting a hard alias.\n     * obj.myPropAlias('someValue');\n     * const result = obj.toJSON();\n     * console.log(result); //{ myProp: 'someValue' }\n     * result.myPropAlias // someValue\n     */\n    function setAssignAlias(obj, propertyName, srcPropertyName, hard) {\n        if (hard === void 0) {\n            hard = false;\n        }\n        validateMethodName.call(obj, propertyName);\n        objectDefinePropertyValue(obj, propertyName, function (value) {\n            obj[srcPropertyName](value);\n            return obj;\n        });\n        if (hard === true) {\n            var key = privateKey(propertyName), srcKey_1 = privateKey(srcPropertyName);\n            Object.defineProperty(obj, key, {\n                configurable: false,\n                enumerable: false,\n                get: function () { return obj[srcKey_1]; }\n            });\n        }\n    }\n    /**\n     * Represent a fluent API factory wrapper for defining FluentAssign instances.\n     */\n    var FluentAssignFactory = (function () {\n        function FluentAssignFactory(fluentAssign) {\n            this._fluentAssign =\n                fluentAssign instanceof FluentAssign ? fluentAssign : new FluentAssign();\n        }\n        /**\n         * Create a setter method on the FluentAssign instance.\n         * @param name The name of the setter function.\n         * @param defaultValue If set (not undefined) set's the value on the instance immediately.\n         * @returns {FluentAssignFactory}\n         */\n        FluentAssignFactory.prototype.setMethod = function (name, defaultValue) {\n            if (defaultValue === void 0) {\n                defaultValue = undefined;\n            }\n            setAssignMethod(this._fluentAssign, name);\n            if (defaultValue !== undefined) {\n                this._fluentAssign[name](defaultValue);\n            }\n            return this;\n        };\n        Object.defineProperty(FluentAssignFactory.prototype, \"fluentAssign\", {\n            /**\n             * The FluentAssign instance.\n             * @returns {FluentAssign<T>}\n             */\n            get: function () {\n                return this._fluentAssign;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return FluentAssignFactory;\n    }());\n    /**\n     * Represent an object where every property is a function representing an assignment function.\n     * Calling each function with a value will assign the value to the object and return the object.\n     * Calling 'toJSON' returns an object with the same properties but this time representing the\n     * assigned values.\n     *\n     * This allows setting an object in a fluent API manner.\n     * Example:\n     let fluent = new FluentAssign<any>(undefined, ['some', 'went']);\n     fluent.some('thing').went('wrong').toJSON();\n     // { some: 'thing', went: 'wrong' }\n     */\n    var FluentAssign = (function () {\n        /**\n         *\n         * @param defaultValues An object representing default values for the underlying object.\n         * @param initialSetters A list of initial setters for this FluentAssign.\n         * @param baseType the class/type to create a new base. optional, {} is used if not supplied.\n         */\n        function FluentAssign(defaultValues, initialSetters, baseType) {\n            if (defaultValues === void 0) {\n                defaultValues = undefined;\n            }\n            if (initialSetters === void 0) {\n                initialSetters = undefined;\n            }\n            if (baseType === void 0) {\n                baseType = undefined;\n            }\n            var _this = this;\n            if (Array.isArray(defaultValues)) {\n                defaultValues.forEach(function (d) { return applyDefaultValues(_this, d); });\n            }\n            else if (defaultValues) {\n                applyDefaultValues(this, defaultValues);\n            }\n            if (Array.isArray(initialSetters)) {\n                initialSetters.forEach(function (name) { return setAssignMethod(_this, name); });\n            }\n            if (baseType) {\n                this.__fluent$base__ = baseType;\n            }\n        }\n        /**\n         * Returns a FluentAssignFactory<FluentAssign<T>> ready to define a FluentAssign type.\n         * @param defaultValues An object representing default values for the instance.\n         * @param initialSetters A list of initial setters for the instance.\n         * @returns {FluentAssignFactory<T>}\n         */\n        FluentAssign.compose = function (defaultValues, initialSetters) {\n            if (defaultValues === void 0) {\n                defaultValues = undefined;\n            }\n            if (initialSetters === void 0) {\n                initialSetters = undefined;\n            }\n            return FluentAssign.composeWith(new FluentAssign(defaultValues, initialSetters));\n        };\n        /**\n         * Returns a FluentAssignFactory<Z> where Z is an instance of FluentAssign<?> or a derived\n         * class of it.\n         * @param fluentAssign An instance of FluentAssign<?> or a derived class of FluentAssign<?>.\n         * @returns {any}\n         */\n        FluentAssign.composeWith = function (fluentAssign) {\n            return new FluentAssignFactory(fluentAssign);\n        };\n        FluentAssign.prototype.toJSON = function () {\n            var _this = this;\n            return getAssignedPropertyNames(this)\n                .reduce(function (obj, name) {\n                var key = privateKey(name);\n                // re-define property descriptors (we dont want their value)\n                var propDesc = Object.getOwnPropertyDescriptor(_this, key);\n                if (propDesc) {\n                    Object.defineProperty(obj, name, propDesc);\n                }\n                else {\n                    obj[name] = _this[key];\n                }\n                return obj;\n            }, this.__fluent$base__ ? new this.__fluent$base__() : {});\n        };\n        return FluentAssign;\n    }());\n    /**\n     * Simple object extend\n     * @param m1\n     * @param m2\n     * @returns {{}}\n     */\n    /**\n     * Simple object extend\n     * @param m1\n     * @param m2\n     * @returns {{}}\n     */ function extend(m1, m2) {\n        var m = {};\n        for (var attr in m1) {\n            if (m1.hasOwnProperty(attr)) {\n                m[attr] = m1[attr];\n            }\n        }\n        for (var attr in m2) {\n            if (m2.hasOwnProperty(attr)) {\n                m[attr] = m2[attr];\n            }\n        }\n        return m;\n    }\n    /**\n     * Simple, not optimized, array union of unique values.\n     * @param arr1\n     * @param arr2\n     * @returns {T[]|any[]|any[][]|any[]}\n     */\n    function arrayUnion(arr1, arr2) {\n        return arr1\n            .concat(arr2.filter(function (v) { return arr1.indexOf(v) === -1; }));\n    }\n    /**\n     * Returns true if the config supports a given key.\n     * @param key\n     * @returns {boolean}\n     */\n    function supportsKey$1(keyCode, config) {\n        if (!Array.isArray(config))\n            return config === null ? false : true;\n        return config.indexOf(keyCode) > -1;\n    }\n    /**\n     * Given an object representing a key/value map of css properties, returns a valid css string\n     * representing the object.\n     * Example:\n     * console.log(toStyleString({\n     *     position: 'absolute',\n     *     width: '100%',\n     *     height: '100%',\n     *     top: '0',\n     *     left: '0',\n     *     right: '0',\n     *     bottom: '0'\n     * }));\n     * // position:absolute;width:100%;height:100%;top:0;left:0;right:0;bottom:0\n     * @param obj\n     * @returns {string}\n     */\n    var PromiseCompleter = (function () {\n        function PromiseCompleter() {\n            var _this = this;\n            this.promise = new Promise(function (res, rej) {\n                _this.resolve = res;\n                _this.reject = rej;\n            });\n        }\n        return PromiseCompleter;\n    }());\n    function noop() { }\n    function createComponent(instructions) {\n        var injector = getInjector(instructions);\n        return instructions.vcRef.createComponent(injector.get(_angular_core.ComponentFactoryResolver).resolveComponentFactory(instructions.component), instructions.vcRef.length, injector, instructions.projectableNodes);\n    }\n    function getInjector(instructions) {\n        var ctxInjector = instructions.injector || instructions.vcRef.parentInjector;\n        return Array.isArray(instructions.bindings) && instructions.bindings.length > 0 ?\n            _angular_core.ReflectiveInjector.fromResolvedProviders(instructions.bindings, ctxInjector) : ctxInjector;\n    }\n    var __extends = (undefined && undefined.__extends) || function (d, b) {\n        for (var p in b)\n            if (b.hasOwnProperty(p))\n                d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var DialogBailOutError = (function (_super) {\n        __extends(DialogBailOutError, _super);\n        function DialogBailOutError(value) {\n            var _this = _super.call(this) || this;\n            if (!value) {\n                value = 'Dialog was forced to close by an unknown source.';\n            }\n            _this.message = value;\n            return _this;\n        }\n        return DialogBailOutError;\n    }(Error));\n    /**\n     * API to an open modal window.\n     */\n    var DialogRef = (function () {\n        function DialogRef(overlay, context) {\n            this.overlay = overlay;\n            this.context = context;\n            this._resultDeferred = new PromiseCompleter();\n            this._onDestroy = new rxjs_Subject.Subject();\n            this.onDestroy = this._onDestroy.asObservable();\n        }\n        Object.defineProperty(DialogRef.prototype, \"result\", {\n            /**\n             * A Promise that is resolved on a close event and rejected on a dismiss event.\n             * @returns {Promise<T>|any|*|Promise<any>}\n             */\n            get: function () {\n                return this._resultDeferred.promise;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Set a close/dismiss guard\n         * @param g\n         */\n        DialogRef.prototype.setCloseGuard = function (guard) {\n            this.closeGuard = guard;\n        };\n        /**\n         *  Close the modal with a return value, i.e: result.\n         */\n        DialogRef.prototype.close = function (result) {\n            var _this = this;\n            if (result === void 0) {\n                result = null;\n            }\n            var _close = function () {\n                _this.destroy();\n                _this._resultDeferred.resolve(result);\n            };\n            this._fireHook('beforeClose')\n                .then(function (value) { return value !== true && _close(); })\n                .catch(_close);\n        };\n        /**\n         *  Close the modal without a return value, i.e: cancelled.\n         *  This call is automatically invoked when a user either:\n         *  - Presses an exit keyboard key (if configured).\n         *  - Clicks outside of the modal window (if configured).\n         *  Usually, dismiss represent a Cancel button or a X button.\n         */\n        DialogRef.prototype.dismiss = function () {\n            var _this = this;\n            var _dismiss = function () {\n                _this.destroy();\n                _this._resultDeferred.promise.catch(function () { });\n                _this._resultDeferred.reject();\n            };\n            this._fireHook('beforeDismiss')\n                .then(function (value) { return value !== true && _dismiss(); })\n                .catch(_dismiss);\n        };\n        /**\n         * Gracefully close the overlay/dialog with a rejected result.\n         * Does not trigger canDestroy on the overlay.\n         */\n        DialogRef.prototype.bailOut = function () {\n            if (this.destroyed !== true) {\n                this.destroyed = true;\n                this._onDestroy.next(null);\n                this._onDestroy.complete();\n                this._resultDeferred.reject(new DialogBailOutError());\n            }\n        };\n        DialogRef.prototype.destroy = function () {\n            var _this = this;\n            if (this.destroyed !== true) {\n                this.destroyed = true;\n                if (typeof this.overlayRef.instance.canDestroy === 'function') {\n                    this.overlayRef.instance.canDestroy()\n                        .catch(function () { })\n                        .then(function () { return _this._destroy(); });\n                }\n                else {\n                    this._destroy();\n                }\n            }\n        };\n        DialogRef.prototype._destroy = function () {\n            this._onDestroy.next(null);\n            this._onDestroy.complete();\n            this.overlayRef.destroy();\n        };\n        DialogRef.prototype._fireHook = function (name) {\n            var gurad = this.closeGuard, fn = gurad && typeof gurad[name] === 'function' && gurad[name];\n            return Promise.resolve(fn ? fn.call(gurad) : false);\n        };\n        return DialogRef;\n    }());\n    (function (DROP_IN_TYPE) {\n        DROP_IN_TYPE[DROP_IN_TYPE[\"alert\"] = 0] = \"alert\";\n        DROP_IN_TYPE[DROP_IN_TYPE[\"prompt\"] = 1] = \"prompt\";\n        DROP_IN_TYPE[DROP_IN_TYPE[\"confirm\"] = 2] = \"confirm\";\n    })(exports.DROP_IN_TYPE || (exports.DROP_IN_TYPE = {}));\n    var OverlayRenderer = (function () {\n        function OverlayRenderer() {\n        }\n        return OverlayRenderer;\n    }());\n    var vcRefCollection = {};\n    function getVCRef(key) {\n        return vcRefCollection[key] ? vcRefCollection[key].slice() : [];\n    }\n    function setVCRef(key, vcRef) {\n        if (!vcRefCollection.hasOwnProperty(key)) {\n            vcRefCollection[key] = [];\n        }\n        vcRefCollection[key].push(vcRef);\n    }\n    function delVCRef(key, vcRef) {\n        if (!vcRef) {\n            vcRefCollection[key] = [];\n        }\n        else {\n            var coll = vcRefCollection[key] || [], idx = coll.indexOf(vcRef);\n            if (idx > -1) {\n                coll.splice(idx, 1);\n            }\n        }\n    }\n    /**\n     * A Simple store that holds a reference to ViewContainerRef instances by a user defined key.\n     * This, with the OverlayTarget directive makes it easy to block the overlay inside an element\n     * without having to use the angular query boilerplate.\n     * @type {{\n     *  getVCRef: (function(string): ViewContainerRef),\n     *  setVCRef: (function(string, ViewContainerRef): void),\n     *  delVCRef: (function(string): void)\n     *  }}\n     */\n    var vcRefStore = { getVCRef: getVCRef, setVCRef: setVCRef, delVCRef: delVCRef };\n    var BASKET_GROUP = {};\n    /**\n     * A dumb stack implementation over an array.\n     */\n    var DialogRefStack = (function () {\n        function DialogRefStack() {\n            this._stack = [];\n            this._stackMap = new Map();\n        }\n        Object.defineProperty(DialogRefStack.prototype, \"length\", {\n            get: function () {\n                return this._stack.length;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        DialogRefStack.prototype.push = function (dialogRef, group) {\n            if (this._stack.indexOf(dialogRef) === -1) {\n                this._stack.push(dialogRef);\n                this._stackMap.set(dialogRef, group || BASKET_GROUP);\n            }\n        };\n        /**\n         * Push a DialogRef into the stack and manage it so when it's done\n         * it will automatically kick itself out of the stack.\n         * @param dialogRef\n         */\n        DialogRefStack.prototype.pushManaged = function (dialogRef, group) {\n            var _this = this;\n            this.push(dialogRef, group);\n            dialogRef.onDestroy.subscribe(function () { return _this.remove(dialogRef); });\n        };\n        DialogRefStack.prototype.pop = function () {\n            var dialogRef = this._stack.pop();\n            this._stackMap.delete(dialogRef);\n            return dialogRef;\n        };\n        /**\n         * Remove a DialogRef from the stack.\n         * @param dialogRef\n         */\n        DialogRefStack.prototype.remove = function (dialogRef) {\n            var idx = this.indexOf(dialogRef);\n            if (idx > -1) {\n                this._stack.splice(idx, 1);\n                this._stackMap.delete(dialogRef);\n            }\n        };\n        DialogRefStack.prototype.index = function (index) {\n            return this._stack[index];\n        };\n        DialogRefStack.prototype.indexOf = function (dialogRef) {\n            return this._stack.indexOf(dialogRef);\n        };\n        DialogRefStack.prototype.groupOf = function (dialogRef) {\n            return this._stackMap.get(dialogRef);\n        };\n        DialogRefStack.prototype.groupBy = function (group) {\n            var arr = [];\n            if (group) {\n                this._stackMap.forEach(function (value, key) {\n                    if (value === group) {\n                        arr.push(key);\n                    }\n                });\n            }\n            return arr;\n        };\n        DialogRefStack.prototype.groupLength = function (group) {\n            var count = 0;\n            if (group) {\n                this._stackMap.forEach(function (value, key) {\n                    if (value === group) {\n                        count++;\n                    }\n                });\n            }\n            return count;\n        };\n        return DialogRefStack;\n    }());\n    var __decorate$2 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n            r = Reflect.decorate(decorators, target, key, desc);\n        else\n            for (var i = decorators.length - 1; i >= 0; i--)\n                if (d = decorators[i])\n                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\n    };\n    var __metadata$1 = (undefined && undefined.__metadata) || function (k, v) {\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\")\n            return Reflect.metadata(k, v);\n    };\n    var _stack = new DialogRefStack();\n    exports.Overlay = (function () {\n        function Overlay(_modalRenderer) {\n            this._modalRenderer = _modalRenderer;\n        }\n        Object.defineProperty(Overlay.prototype, \"stackLength\", {\n            get: function () {\n                return _stack.length;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Check if a given DialogRef is the top most ref in the stack.\n         * TODO: distinguish between body modal vs in element modal.\n         * @param dialogRef\n         * @returns {boolean}\n         */\n        Overlay.prototype.isTopMost = function (dialogRef) {\n            return _stack.indexOf(dialogRef) === _stack.length - 1;\n        };\n        Overlay.prototype.stackPosition = function (dialogRef) {\n            return _stack.indexOf(dialogRef);\n        };\n        Overlay.prototype.groupStackLength = function (dialogRef) {\n            return _stack.groupLength(_stack.groupOf(dialogRef));\n        };\n        /**\n         * Creates an overlay and returns a dialog ref.\n         * @param config instructions how to create the overlay\n         * @param group A token to associate the new overlay with, used for reference (stacks usually)\n         * @returns {DialogRef<T>[]}\n         */\n        Overlay.prototype.open = function (config, group) {\n            var _this = this;\n            var viewContainer = config.viewContainer, containers = [];\n            if (typeof viewContainer === 'string') {\n                containers = vcRefStore.getVCRef(viewContainer);\n            }\n            else if (Array.isArray(viewContainer)) {\n                containers = viewContainer;\n            }\n            else if (viewContainer) {\n                containers = [viewContainer];\n            }\n            if (!containers || !containers[0]) {\n                if (!this.defaultViewContainer) {\n                    throw new Error('Default view container not set. Add the \"defaultOverlayTarget\" directive ' +\n                        'to the application root component template (e.g: <span defaultOverlayTarget></span>. ' +\n                        'You can also set it manually using the \"Overlay\" service \"defaultViewContainer\" property.');\n                }\n                containers = [this.defaultViewContainer];\n            }\n            return containers\n                .map(function (vc) { return _this.createOverlay(config.renderer || _this._modalRenderer, vc, config, group); });\n        };\n        Overlay.prototype.createOverlay = function (renderer, vcRef, config, group) {\n            if (config.context) {\n                config.context.normalize();\n            }\n            var dialog = new DialogRef(this, config.context || {});\n            dialog.inElement = config.context && !!config.context.inElement;\n            var cmpRef = renderer.render(dialog, vcRef, config.injector);\n            Object.defineProperty(dialog, 'overlayRef', { value: cmpRef });\n            _stack.pushManaged(dialog, group);\n            return dialog;\n        };\n        return Overlay;\n    }());\n    exports.Overlay = __decorate$2([\n        _angular_core.Injectable(),\n        __metadata$1(\"design:paramtypes\", [OverlayRenderer])\n    ], exports.Overlay);\n    var __decorate$1 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n            r = Reflect.decorate(decorators, target, key, desc);\n        else\n            for (var i = decorators.length - 1; i >= 0; i--)\n                if (d = decorators[i])\n                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\n    };\n    var __metadata = (undefined && undefined.__metadata) || function (k, v) {\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\")\n            return Reflect.metadata(k, v);\n    };\n    /**\n     * A directive use to signal the overlay that the host of this directive\n     * is a dialog boundary, i.e: over click outside of the element should close the modal\n     * (if non blocking)\n     */\n    exports.OverlayDialogBoundary = (function () {\n        function OverlayDialogBoundary(el, dialogRef) {\n            if (dialogRef && el.nativeElement) {\n                dialogRef.overlayRef.instance.setClickBoundary(el.nativeElement);\n            }\n        }\n        return OverlayDialogBoundary;\n    }());\n    exports.OverlayDialogBoundary = __decorate$1([\n        _angular_core.Directive({\n            selector: '[overlayDialogBoundary]'\n        }),\n        __metadata(\"design:paramtypes\", [_angular_core.ElementRef, DialogRef])\n    ], exports.OverlayDialogBoundary);\n    exports.OverlayTarget = (function () {\n        function OverlayTarget(vcRef) {\n            this.vcRef = vcRef;\n        }\n        Object.defineProperty(OverlayTarget.prototype, \"targetKey\", {\n            set: function (value) {\n                this._targetKey = value;\n                if (value) {\n                    vcRefStore.setVCRef(value, this.vcRef);\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        OverlayTarget.prototype.ngOnDestroy = function () {\n            if (this._targetKey) {\n                vcRefStore.delVCRef(this._targetKey, this.vcRef);\n            }\n        };\n        return OverlayTarget;\n    }());\n    __decorate$1([\n        _angular_core.Input('overlayTarget'),\n        __metadata(\"design:type\", String),\n        __metadata(\"design:paramtypes\", [String])\n    ], exports.OverlayTarget.prototype, \"targetKey\", null);\n    exports.OverlayTarget = __decorate$1([\n        _angular_core.Directive({\n            selector: '[overlayTarget]'\n        }),\n        __metadata(\"design:paramtypes\", [_angular_core.ViewContainerRef])\n    ], exports.OverlayTarget);\n    var DefaultOverlayTarget = (function () {\n        function DefaultOverlayTarget(overlay, vcRef) {\n            this.overlay = overlay;\n            overlay.defaultViewContainer = vcRef;\n        }\n        DefaultOverlayTarget.prototype.ngOnDestroy = function () {\n            this.overlay.defaultViewContainer = undefined;\n        };\n        return DefaultOverlayTarget;\n    }());\n    DefaultOverlayTarget = __decorate$1([\n        _angular_core.Directive({\n            selector: '[defaultOverlayTarget]'\n        }),\n        __metadata(\"design:paramtypes\", [exports.Overlay, _angular_core.ViewContainerRef])\n    ], DefaultOverlayTarget);\n    var __decorate$4 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n            r = Reflect.decorate(decorators, target, key, desc);\n        else\n            for (var i = decorators.length - 1; i >= 0; i--)\n                if (d = decorators[i])\n                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\n    };\n    var __metadata$3 = (undefined && undefined.__metadata) || function (k, v) {\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\")\n            return Reflect.metadata(k, v);\n    };\n    // <template [dynCmp]=\"myCmp\" [dynCmpBindings]=\"myBindings\"></template>\n    // <template [dynCmp]=\"ctx.component\" [dynCmpBindings]=\"ctx.bindings\" [dynCmpProjectables]=\"ctx.projectableNodes\"></template>\n    exports.SwapComponentDirective = (function () {\n        function SwapComponentDirective(cfr, vcRef, tRef) {\n            this.cfr = cfr;\n            this.vcRef = vcRef;\n            this.tRef = tRef;\n            this.onCreate = new _angular_core.EventEmitter(false);\n        }\n        Object.defineProperty(SwapComponentDirective.prototype, \"swapCmp\", {\n            set: function (component) {\n                this.component = component;\n                this.vcRef.clear();\n                if (this.component) {\n                    var injector = this.swapCmpInjector || this.vcRef.parentInjector;\n                    if (Array.isArray(this.swapCmpBindings) && this.swapCmpBindings.length > 0) {\n                        injector = _angular_core.ReflectiveInjector.fromResolvedProviders(this.swapCmpBindings, injector);\n                    }\n                    var cmpRef = this.vcRef.createComponent(this.cfr.resolveComponentFactory(component), this.vcRef.length, injector, this.swapCmpProjectables);\n                    cmpRef.changeDetectorRef.detectChanges();\n                    this.onCreate.emit(cmpRef);\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return SwapComponentDirective;\n    }());\n    __decorate$4([\n        _angular_core.Input(),\n        __metadata$3(\"design:type\", Array)\n    ], exports.SwapComponentDirective.prototype, \"swapCmpBindings\", void 0);\n    __decorate$4([\n        _angular_core.Input(),\n        __metadata$3(\"design:type\", _angular_core.Injector)\n    ], exports.SwapComponentDirective.prototype, \"swapCmpInjector\", void 0);\n    __decorate$4([\n        _angular_core.Input(),\n        __metadata$3(\"design:type\", Array)\n    ], exports.SwapComponentDirective.prototype, \"swapCmpProjectables\", void 0);\n    __decorate$4([\n        _angular_core.Output(),\n        __metadata$3(\"design:type\", _angular_core.EventEmitter)\n    ], exports.SwapComponentDirective.prototype, \"onCreate\", void 0);\n    __decorate$4([\n        _angular_core.Input(),\n        __metadata$3(\"design:type\", Object),\n        __metadata$3(\"design:paramtypes\", [Object])\n    ], exports.SwapComponentDirective.prototype, \"swapCmp\", null);\n    exports.SwapComponentDirective = __decorate$4([\n        _angular_core.Directive({\n            selector: '[swapCmp]'\n        }),\n        __metadata$3(\"design:paramtypes\", [_angular_core.ComponentFactoryResolver,\n            _angular_core.ViewContainerRef,\n            _angular_core.TemplateRef])\n    ], exports.SwapComponentDirective);\n    var BROWSER_PREFIX = ['webkit', 'moz', 'MS', 'o', ''];\n    function register(eventName, element, cb) {\n        BROWSER_PREFIX.forEach(function (p) {\n            element.addEventListener(p ? p + eventName : eventName.toLowerCase(), cb, false);\n        });\n    }\n    /**\n     * A base class for supporting dynamic components.\n     * There are 3 main support areas:\n     * 1 - Easy wrapper for dynamic styling via CSS classes and inline styles.\n     * 2 - Easy wrapper for interception of transition/animation end events.\n     * 3 - Easy wrapper for component creation and injection.\n     *\n     * Dynamic css is done via direct element manipulation (via renderer), it does not use change detection\n     * or binding. This is to allow better control over animation.\n     *\n     * Animation support is limited, only transition/keyframes END even are notified.\n     * The animation support is needed since currently the angular animation module is limited as well and\n     * does not support CSS animation that are not pre-parsed and are not in the styles metadata of a component.\n     *\n     * Capabilities: Add/Remove styls, Add/Remove classes, listen to animation/transition end event,\n     * add components\n     */\n    var BaseDynamicComponent = (function () {\n        function BaseDynamicComponent(el, renderer) {\n            this.el = el;\n            this.renderer = renderer;\n        }\n        BaseDynamicComponent.prototype.activateAnimationListener = function () {\n            var _this = this;\n            if (this.animationEnd)\n                return;\n            this.animationEnd = new rxjs_Subject.Subject();\n            this.animationEnd$ = this.animationEnd.asObservable();\n            register('TransitionEnd', this.el.nativeElement, function (e) { return _this.onEnd(e); });\n            register('AnimationEnd', this.el.nativeElement, function (e) { return _this.onEnd(e); });\n        };\n        /**\n         * Set a specific inline style on the overlay host element.\n         * @param prop The style key\n         * @param value The value, undefined to remove\n         * @returns {ModalOverlay}\n         */\n        BaseDynamicComponent.prototype.setStyle = function (prop, value) {\n            this.renderer.setElementStyle(this.el.nativeElement, prop, value);\n            return this;\n        };\n        BaseDynamicComponent.prototype.forceReflow = function () {\n            this.el.nativeElement.offsetWidth;\n        };\n        BaseDynamicComponent.prototype.addClass = function (css, forceReflow) {\n            var _this = this;\n            if (forceReflow === void 0) {\n                forceReflow = false;\n            }\n            css.split(' ')\n                .forEach(function (c) { return _this.renderer.setElementClass(_this.el.nativeElement, c, true); });\n            if (forceReflow)\n                this.forceReflow();\n        };\n        BaseDynamicComponent.prototype.removeClass = function (css, forceReflow) {\n            var _this = this;\n            if (forceReflow === void 0) {\n                forceReflow = false;\n            }\n            css.split(' ')\n                .forEach(function (c) { return _this.renderer.setElementClass(_this.el.nativeElement, c, false); });\n            if (forceReflow)\n                this.forceReflow();\n        };\n        BaseDynamicComponent.prototype.ngOnDestroy = function () {\n            if (this.animationEnd && !this.animationEnd.closed) {\n                this.animationEnd.complete();\n            }\n        };\n        BaseDynamicComponent.prototype.myAnimationEnd$ = function () {\n            var _this = this;\n            return this.animationEnd$\n                .filter(function (e) { return e.target === _this.el.nativeElement; });\n        };\n        /**\n         * Add a component, supply a view container ref.\n         * Note: The components vcRef will result in a sibling.\n         * @param component The component to add\n         * @param vcRef The container to add to\n         * @param bindings Bindings to use (added on top of the ViewContainerRef)\n         * @returns {Promise<ComponentRef<any>>}\n         */\n        BaseDynamicComponent.prototype._addComponent = function (instructions) {\n            var cmpRef = createComponent(instructions);\n            cmpRef.changeDetectorRef.detectChanges();\n            return cmpRef;\n        };\n        BaseDynamicComponent.prototype.onEnd = function (event) {\n            if (!this.animationEnd.closed) {\n                this.animationEnd.next(event);\n            }\n        };\n        return BaseDynamicComponent;\n    }());\n    var __extends$2 = (undefined && undefined.__extends) || function (d, b) {\n        for (var p in b)\n            if (b.hasOwnProperty(p))\n                d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var __decorate$5 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n            r = Reflect.decorate(decorators, target, key, desc);\n        else\n            for (var i = decorators.length - 1; i >= 0; i--)\n                if (d = decorators[i])\n                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\n    };\n    var __metadata$4 = (undefined && undefined.__metadata) || function (k, v) {\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\")\n            return Reflect.metadata(k, v);\n    };\n    /**\n     * Represents the modal backdrop shaped by CSS.\n     */\n    exports.CSSBackdrop = (function (_super) {\n        __extends$2(CSSBackdrop, _super);\n        function CSSBackdrop(el, renderer) {\n            var _this = _super.call(this, el, renderer) || this;\n            _this.activateAnimationListener();\n            var style = {\n                position: 'absolute',\n                top: 0,\n                left: 0,\n                width: '100%',\n                height: '100%'\n            };\n            Object.keys(style).forEach(function (k) { return _this.setStyle(k, style[k]); });\n            return _this;\n        }\n        return CSSBackdrop;\n    }(BaseDynamicComponent));\n    exports.CSSBackdrop = __decorate$5([\n        _angular_core.Component({\n            selector: 'css-backdrop',\n            host: {\n                '[attr.class]': 'cssClass',\n                '[attr.style]': 'styleStr'\n            },\n            encapsulation: _angular_core.ViewEncapsulation.None,\n            template: \"\"\n        }),\n        __metadata$4(\"design:paramtypes\", [_angular_core.ElementRef, _angular_core.Renderer])\n    ], exports.CSSBackdrop);\n    var __extends$3 = (undefined && undefined.__extends) || function (d, b) {\n        for (var p in b)\n            if (b.hasOwnProperty(p))\n                d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var __decorate$6 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n            r = Reflect.decorate(decorators, target, key, desc);\n        else\n            for (var i = decorators.length - 1; i >= 0; i--)\n                if (d = decorators[i])\n                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\n    };\n    var __metadata$5 = (undefined && undefined.__metadata) || function (k, v) {\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\")\n            return Reflect.metadata(k, v);\n    };\n    /**\n     * A component that acts as a top level container for an open modal window.\n     */\n    exports.CSSDialogContainer = (function (_super) {\n        __extends$3(CSSDialogContainer, _super);\n        function CSSDialogContainer(dialog, el, renderer) {\n            var _this = _super.call(this, el, renderer) || this;\n            _this.dialog = dialog;\n            _this.activateAnimationListener();\n            return _this;\n        }\n        return CSSDialogContainer;\n    }(BaseDynamicComponent));\n    exports.CSSDialogContainer = __decorate$6([\n        _angular_core.Component({\n            selector: 'css-dialog-container',\n            host: {\n                'tabindex': '-1',\n                'role': 'dialog'\n            },\n            encapsulation: _angular_core.ViewEncapsulation.None,\n            template: \"<ng-content></ng-content>\"\n        }),\n        __metadata$5(\"design:paramtypes\", [DialogRef,\n            _angular_core.ElementRef, _angular_core.Renderer])\n    ], exports.CSSDialogContainer);\n    var __extends$1 = (undefined && undefined.__extends) || function (d, b) {\n        for (var p in b)\n            if (b.hasOwnProperty(p))\n                d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var __decorate$3 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n            r = Reflect.decorate(decorators, target, key, desc);\n        else\n            for (var i = decorators.length - 1; i >= 0; i--)\n                if (d = decorators[i])\n                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\n    };\n    var __metadata$2 = (undefined && undefined.__metadata) || function (k, v) {\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\")\n            return Reflect.metadata(k, v);\n    };\n    /**\n     * Represents the modal overlay.\n     */\n    exports.ModalOverlay = (function (_super) {\n        __extends$1(ModalOverlay, _super);\n        function ModalOverlay(dialogRef, vcr, el, renderer) {\n            var _this = _super.call(this, el, renderer) || this;\n            _this.dialogRef = dialogRef;\n            _this.vcr = vcr;\n            _this.activateAnimationListener();\n            return _this;\n        }\n        /**\n         * @internal\n         */\n        ModalOverlay.prototype.getProjectables = function (content, bindings) {\n            var nodes;\n            if (typeof content === 'string') {\n                nodes = [[this.renderer.createText(null, \"\" + content)]];\n            }\n            else if (content instanceof _angular_core.TemplateRef) {\n                nodes = [\n                    this.dialogRef.overlay.defaultViewContainer\n                        .createEmbeddedView(content, { dialogRef: this.dialogRef }).rootNodes\n                ];\n            }\n            else {\n                nodes = [this.embedComponent({ component: content, bindings: bindings }).rootNodes];\n            }\n            return nodes;\n        };\n        ModalOverlay.prototype.embedComponent = function (config) {\n            return this.vcr.createEmbeddedView(this.template, {\n                $implicit: config\n            });\n        };\n        ModalOverlay.prototype.addComponent = function (type, bindings, projectableNodes) {\n            if (bindings === void 0) {\n                bindings = [];\n            }\n            if (projectableNodes === void 0) {\n                projectableNodes = [];\n            }\n            return _super.prototype._addComponent.call(this, {\n                component: type,\n                vcRef: this.innerVcr,\n                bindings: bindings,\n                projectableNodes: projectableNodes\n            });\n        };\n        ModalOverlay.prototype.fullscreen = function () {\n            var _this = this;\n            var style = {\n                position: 'fixed',\n                top: 0,\n                left: 0,\n                bottom: 0,\n                right: 0,\n                'z-index': 1500\n            };\n            Object.keys(style).forEach(function (k) { return _this.setStyle(k, style[k]); });\n        };\n        ModalOverlay.prototype.insideElement = function () {\n            var _this = this;\n            var style = {\n                position: 'absolute',\n                overflow: 'hidden',\n                width: '100%',\n                height: '100%',\n                top: 0,\n                left: 0,\n                bottom: 0,\n                right: 0\n            };\n            Object.keys(style).forEach(function (k) { return _this.setStyle(k, style[k]); });\n        };\n        /**\n         * Define an element that click inside it will not trigger modal close.\n         * Since events bubble, clicking on a dialog will bubble up to the overlay, a plugin\n         * must define an element that represent the dialog, the overlay will make sure no to close when\n         * it was clicked.\n         * @param element\n         */\n        ModalOverlay.prototype.setClickBoundary = function (element) {\n            var _this = this;\n            var target;\n            var elListener = function (event) { return target = event.target; };\n            var docListener = function (event) {\n                if (_this.dialogRef.context.isBlocking || !_this.dialogRef.overlay.isTopMost(_this.dialogRef)) {\n                    return;\n                }\n                var current = event.target;\n                // on click, this will hit.\n                if (current === target)\n                    return;\n                // on mouse down -> drag -> release the current might not be 'target', it might be\n                // a sibling or a child (i.e: not part of the tree-up direction). It might also be a release\n                // outside the dialog... so we compare to the boundary element\n                do {\n                    if (current === element) {\n                        return;\n                    }\n                } while (current.parentNode && (current = current.parentNode));\n                _this.dialogRef.dismiss();\n            };\n            this.dialogRef.onDestroy.subscribe(function () {\n                element.removeEventListener('click', elListener, false);\n                element.removeEventListener('touchstart', elListener, false);\n                document.removeEventListener('click', docListener, false);\n                document.removeEventListener('touchend', docListener, false);\n            });\n            setTimeout(function () {\n                element.addEventListener('mousedown', elListener, false);\n                element.addEventListener('touchstart', docListener, false);\n                document.addEventListener('click', docListener, false);\n                document.addEventListener('touchend', docListener, false);\n            });\n        };\n        /**\n         * Temp workaround for animation where destruction of the top level component does not\n         * trigger child animations. Solution should be found either in animation module or in design\n         * of the modal component tree.\n         * @returns {Promise<void>}\n         */\n        ModalOverlay.prototype.canDestroy = function () {\n            var completer = new PromiseCompleter();\n            if (!Array.isArray(this.beforeDestroyHandlers)) {\n                completer.resolve();\n            }\n            else {\n                // run destroy notification but protect against halt.\n                var id_1 = setTimeout(function () {\n                    id_1 = null;\n                    completer.reject();\n                }, 1000);\n                var resolve = function () {\n                    if (id_1 === null)\n                        return;\n                    clearTimeout(id_1);\n                    completer.resolve();\n                };\n                Promise.all(this.beforeDestroyHandlers.map(function (fn) { return fn(); }))\n                    .then(resolve)\n                    .catch(resolve);\n            }\n            return completer.promise;\n        };\n        /**\n         * A handler running before destruction of the overlay\n         * use to delay destruction due to animation.\n         * This is part of the workaround for animation, see canDestroy.\n         *\n         * NOTE: There is no guarantee that the listeners will fire, use dialog.onDestory for that.\n         * @param fn\n         */\n        ModalOverlay.prototype.beforeDestroy = function (fn) {\n            if (!this.beforeDestroyHandlers) {\n                this.beforeDestroyHandlers = [];\n            }\n            this.beforeDestroyHandlers.push(fn);\n        };\n        ModalOverlay.prototype.documentKeypress = function (event) {\n            // check that this modal is the last in the stack.\n            if (!this.dialogRef.overlay.isTopMost(this.dialogRef))\n                return;\n            if (supportsKey$1(event.keyCode, this.dialogRef.context.keyboard)) {\n                this.dialogRef.dismiss();\n            }\n        };\n        ModalOverlay.prototype.ngOnDestroy = function () {\n            _super.prototype.ngOnDestroy.call(this);\n            if (this.dialogRef.destroyed !== true) {\n                // if we're here the overlay is destroyed by an external event that is not user invoked.\n                // i.e: The user did no call dismiss or close and dialogRef.destroy() did not invoke.\n                // this will happen when routing or killing an element containing a blocked overlay (ngIf)\n                // we bail out, i.e gracefully shutting down.\n                this.dialogRef.bailOut();\n            }\n        };\n        return ModalOverlay;\n    }(BaseDynamicComponent));\n    __decorate$3([\n        _angular_core.ViewChild('innerView', { read: _angular_core.ViewContainerRef }),\n        __metadata$2(\"design:type\", _angular_core.ViewContainerRef)\n    ], exports.ModalOverlay.prototype, \"innerVcr\", void 0);\n    __decorate$3([\n        _angular_core.ViewChild('template'),\n        __metadata$2(\"design:type\", _angular_core.TemplateRef)\n    ], exports.ModalOverlay.prototype, \"template\", void 0);\n    exports.ModalOverlay = __decorate$3([\n        _angular_core.Component({\n            selector: 'modal-overlay',\n            host: {\n                '(body:keydown)': 'documentKeypress($event)'\n            },\n            encapsulation: _angular_core.ViewEncapsulation.None,\n            template: \"<template #innerView></template>\\n<template #template let-ctx>\\n    <template [swapCmp]=\\\"ctx.component\\\" [swapCmpBindings]=\\\"ctx.bindings\\\" [swapCmpProjectables]=\\\"ctx.projectableNodes\\\"></template>\\n</template>\\n\"\n        }),\n        __metadata$2(\"design:paramtypes\", [DialogRef,\n            _angular_core.ViewContainerRef,\n            _angular_core.ElementRef,\n            _angular_core.Renderer])\n    ], exports.ModalOverlay);\n    var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n            r = Reflect.decorate(decorators, target, key, desc);\n        else\n            for (var i = decorators.length - 1; i >= 0; i--)\n                if (d = decorators[i])\n                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\n    };\n    exports.DOMOverlayRenderer = (function () {\n        function DOMOverlayRenderer() {\n        }\n        DOMOverlayRenderer.prototype.render = function (dialog, vcRef, injector) {\n            var bindings = _angular_core.ReflectiveInjector.resolve([\n                { provide: DialogRef, useValue: dialog }\n            ]);\n            var cmpRef = createComponent({\n                component: exports.ModalOverlay,\n                vcRef: vcRef,\n                injector: injector,\n                bindings: bindings\n            });\n            if (dialog.inElement) {\n                vcRef.element.nativeElement.appendChild(cmpRef.location.nativeElement);\n            }\n            else {\n                document.body.appendChild(cmpRef.location.nativeElement);\n            }\n            return cmpRef;\n        };\n        return DOMOverlayRenderer;\n    }());\n    exports.DOMOverlayRenderer = __decorate([\n        _angular_core.Injectable()\n    ], exports.DOMOverlayRenderer);\n    var __extends$4 = (undefined && undefined.__extends) || function (d, b) {\n        for (var p in b)\n            if (b.hasOwnProperty(p))\n                d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var UnsupportedDropInError = (function (_super) {\n        __extends$4(UnsupportedDropInError, _super);\n        function UnsupportedDropInError(dropInName) {\n            var _this = _super.call(this) || this;\n            _this.message = \"Unsupported Drop-In \" + dropInName;\n            return _this;\n        }\n        return UnsupportedDropInError;\n    }(Error));\n    var Modal = (function () {\n        function Modal(overlay) {\n            this.overlay = overlay;\n        }\n        Modal.prototype.alert = function () {\n            throw new UnsupportedDropInError('alert');\n        };\n        Modal.prototype.prompt = function () {\n            throw new UnsupportedDropInError('prompt');\n        };\n        Modal.prototype.confirm = function () {\n            throw new UnsupportedDropInError('confirm');\n        };\n        /**\n         * Opens a modal window inside an existing component.\n         * @param content The content to display, either string, template ref or a component.\n         * @param config Additional settings.\n         * @returns {Promise<DialogRef>}\n         */\n        Modal.prototype.open = function (content, config) {\n            config = config || {};\n            try {\n                var dialogs = this.overlay.open(config, this.constructor);\n                if (dialogs.length > 1) {\n                    console.warn(\"Attempt to open more then 1 overlay detected.\\n        Multiple modal copies are not supported at the moment, \\n        only the first viewContainer will display.\");\n                }\n                // TODO:  Currently supporting 1 view container, hence working on dialogs[0].\n                //        upgrade to multiple containers.\n                return Promise.resolve(this.create(dialogs[0], content, config.bindings));\n            }\n            catch (e) {\n                return Promise.reject(e);\n            }\n        };\n        Modal.prototype.createBackdrop = function (dialogRef, BackdropComponent) {\n            var b = _angular_core.ReflectiveInjector.resolve([{ provide: DialogRef, useValue: dialogRef }]);\n            return dialogRef.overlayRef.instance.addComponent(BackdropComponent, b);\n        };\n        Modal.prototype.createContainer = function (dialogRef, ContainerComponent, content, bindings) {\n            var b = _angular_core.ReflectiveInjector.resolve([{ provide: DialogRef, useValue: dialogRef }])\n                .concat(bindings || []);\n            var nodes = dialogRef.overlayRef.instance.getProjectables(content, b);\n            return dialogRef.overlayRef.instance.addComponent(ContainerComponent, b, nodes);\n        };\n        /**\n         * A helper function for derived classes to create backdrop & container\n         * @param dialogRef\n         * @param backdrop\n         * @param container\n         * @returns { backdropRef: ComponentRef<B>, containerRef: ComponentRef<C> }\n         *\n         * @deprecated use createBackdrop and createContainer instead\n         */\n        Modal.prototype.createModal = function (dialogRef, backdrop, container) {\n            var b = _angular_core.ReflectiveInjector.resolve([{ provide: DialogRef, useValue: dialogRef }]);\n            return {\n                backdropRef: dialogRef.overlayRef.instance.addComponent(backdrop, b),\n                containerRef: dialogRef.overlayRef.instance.addComponent(container, b)\n            };\n        };\n        return Modal;\n    }());\n    // heavily inspired by:\n    // http://www.bennadel.com/blog/3025-creating-custom-dom-and-host-event-bindings-in-angular-2-beta-6.htm\n    var __decorate$7 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n            r = Reflect.decorate(decorators, target, key, desc);\n        else\n            for (var i = decorators.length - 1; i >= 0; i--)\n                if (d = decorators[i])\n                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\n    };\n    var __metadata$6 = (undefined && undefined.__metadata) || function (k, v) {\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\")\n            return Reflect.metadata(k, v);\n    };\n    var eventMap = {\n        clickOutside: 'click',\n        mousedownOutside: 'mousedown',\n        mouseupOutside: 'mouseup',\n        mousemoveOutside: 'mousemove'\n    };\n    /**\n     * An event handler factory for event handlers that bubble the event to a given handler\n     * if the event target is not an ancestor of the given element.\n     * @param element\n     * @param handler\n     * @returns {function(any): undefined}\n     */\n    function bubbleNonAncestorHandlerFactory(element, handler) {\n        return function (event) {\n            var current = event.target;\n            do {\n                if (current === element) {\n                    return;\n                }\n            } while (current.parentNode && (current = current.parentNode));\n            handler(event);\n        };\n    }\n    var DOMOutsideEventPlugin = (function () {\n        function DOMOutsideEventPlugin() {\n            // TODO: use DI factory for this.\n            if (!document || typeof document.addEventListener !== 'function') {\n                this.addEventListener = noop;\n            }\n        }\n        DOMOutsideEventPlugin.prototype.supports = function (eventName) {\n            return eventMap.hasOwnProperty(eventName);\n        };\n        DOMOutsideEventPlugin.prototype.addEventListener = function (element, eventName, handler) {\n            var zone = this.manager.getZone();\n            // A Factory that registers the event on the document, instead of the element.\n            // the handler is created at runtime, and it acts as a propagation/bubble predicate, it will\n            // bubble up the event (i.e: execute our original event handler) only if the event targer\n            // is an ancestor of our element.\n            // The event is fired inside the angular zone so change detection can kick into action.\n            var onceOnOutside = function () {\n                var listener = bubbleNonAncestorHandlerFactory(element, function (evt) { return zone.runGuarded(function () { return handler(evt); }); });\n                // mimic BrowserDomAdapter.onAndCancel\n                document.addEventListener(eventMap[eventName], listener, false);\n                return function () { return document.removeEventListener(eventMap[eventName], listener, false); };\n            };\n            // we run the event registration for the document in a different zone, this will make sure\n            // change detection is off.\n            // It turns out that if a component that use DOMOutsideEventPlugin is built from a click\n            // event, we might get here before the event reached the document, causing a quick false\n            // positive handling (when stopPropagation() was'nt invoked). To workaround this we wait\n            // for the next vm turn and register.\n            // Event registration returns a dispose function for that event, angular use it to clean\n            // up after component get's destroyed. Since we need to return a dispose function\n            // synchronously we have to put a wrapper for it since we will get it asynchronously,\n            // i.e: after we need to return it.\n            //\n            return zone.runOutsideAngular(function () {\n                var fn;\n                setTimeout(function () { return fn = onceOnOutside(); }, 0);\n                return function () { return fn(); };\n            });\n        };\n        DOMOutsideEventPlugin.prototype.addGlobalEventListener = function (target, eventName, handler) {\n            throw 'not supported';\n        };\n        return DOMOutsideEventPlugin;\n    }());\n    DOMOutsideEventPlugin = __decorate$7([\n        _angular_core.Injectable(),\n        __metadata$6(\"design:paramtypes\", [])\n    ], DOMOutsideEventPlugin);\n    var __extends$5 = (undefined && undefined.__extends) || function (d, b) {\n        for (var p in b)\n            if (b.hasOwnProperty(p))\n                d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var DEFAULT_VALUES = {\n        inElement: false,\n        isBlocking: true,\n        keyboard: [27],\n        supportsKey: function supportsKey(keyCode) {\n            return this.keyboard.indexOf(keyCode) > -1;\n        }\n    };\n    var DEFAULT_SETTERS = [\n        'inElement',\n        'isBlocking',\n        'keyboard'\n    ];\n    var OverlayContext = (function () {\n        function OverlayContext() {\n        }\n        OverlayContext.prototype.normalize = function () {\n            if (this.isBlocking !== false)\n                this.isBlocking = true;\n            if (this.keyboard === null) {\n                this.keyboard = [];\n            }\n            else if (typeof this.keyboard === 'number') {\n                this.keyboard = [this.keyboard];\n            }\n            else if (!Array.isArray(this.keyboard)) {\n                this.keyboard = DEFAULT_VALUES.keyboard;\n            }\n        };\n        return OverlayContext;\n    }());\n    /**\n     * A core context builder for a modal window instance, used to define the context upon\n     * a modal choose it's behaviour.\n     */\n    var OverlayContextBuilder = (function (_super) {\n        __extends$5(OverlayContextBuilder, _super);\n        function OverlayContextBuilder(defaultValues, initialSetters, baseType) {\n            if (defaultValues === void 0) {\n                defaultValues = undefined;\n            }\n            if (initialSetters === void 0) {\n                initialSetters = undefined;\n            }\n            if (baseType === void 0) {\n                baseType = undefined;\n            }\n            return _super.call(this, extend(DEFAULT_VALUES, defaultValues || {}), arrayUnion(DEFAULT_SETTERS, initialSetters || []), baseType || OverlayContext // https://github.com/Microsoft/TypeScript/issues/7234\n            ) || this;\n        }\n        /**\n         * Returns an new OverlayConfig with a context property representing the data in this builder.\n         * @param base A base configuration that the result will extend\n         * @returns OverlayConfig\n         */\n        OverlayContextBuilder.prototype.toOverlayConfig = function (base) {\n            return extend(base || {}, {\n                context: this.toJSON()\n            });\n        };\n        return OverlayContextBuilder;\n    }(FluentAssign));\n    /**\n     * A helper to create an `OverlayConfig` on the fly.\n     * Since `OverlayConfig` requires context it means a builder is needed, this process had some boilerplate.\n     * When a quick, on the fly overlay config is needed use this helper to avoid that boilerplate.\n     *\n     * A builder is used as an API to allow setting the context and providing some operations around the modal.\n     * When a developers knows the context before hand we can skip this step, this is what this factory is for.\n     *\n     * @param context The context for the modal\n     * @param baseContextType Optional. The type/class of the context. This is the class used to init a new instance of the context\n     * @param baseConfig A base configuration that the result will extend\n     * @returns {OverlayConfig}\n     */\n    function overlayConfigFactory(context, baseContextType, baseConfig) {\n        return new OverlayContextBuilder(context, undefined, baseContextType).toOverlayConfig(baseConfig);\n    }\n    var __extends$6 = (undefined && undefined.__extends) || function (d, b) {\n        for (var p in b)\n            if (b.hasOwnProperty(p))\n                d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var DEFAULT_VALUES$1 = {};\n    var DEFAULT_SETTERS$1 = [\n        'message'\n    ];\n    var ModalContext = (function (_super) {\n        __extends$6(ModalContext, _super);\n        function ModalContext() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        return ModalContext;\n    }(OverlayContext));\n    /**\n     * A core context builder for a modal window instance, used to define the context upon\n     * a modal choose it's behaviour.\n     */\n    var ModalContextBuilder = (function (_super) {\n        __extends$6(ModalContextBuilder, _super);\n        function ModalContextBuilder(defaultValues, initialSetters, baseType) {\n            if (defaultValues === void 0) {\n                defaultValues = undefined;\n            }\n            if (initialSetters === void 0) {\n                initialSetters = undefined;\n            }\n            if (baseType === void 0) {\n                baseType = undefined;\n            }\n            return _super.call(this, extend(DEFAULT_VALUES$1, defaultValues || {}), arrayUnion(DEFAULT_SETTERS$1, initialSetters || []), baseType) || this;\n        }\n        return ModalContextBuilder;\n    }(OverlayContextBuilder));\n    var __extends$7 = (undefined && undefined.__extends) || function (d, b) {\n        for (var p in b)\n            if (b.hasOwnProperty(p))\n                d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var DEFAULT_SETTERS$2 = [\n        'component'\n    ];\n    var ModalOpenContext = (function (_super) {\n        __extends$7(ModalOpenContext, _super);\n        function ModalOpenContext() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        return ModalOpenContext;\n    }(ModalContext));\n    /**\n     * A Modal Context that knows about the modal service, and so can open a modal window on demand.\n     * Use the fluent API to configure the preset and then invoke the 'open' method to open a modal\n     * based on the context.\n     */\n    var ModalOpenContextBuilder = (function (_super) {\n        __extends$7(ModalOpenContextBuilder, _super);\n        function ModalOpenContextBuilder(defaultValues, initialSetters, baseType) {\n            if (defaultValues === void 0) {\n                defaultValues = undefined;\n            }\n            if (initialSetters === void 0) {\n                initialSetters = undefined;\n            }\n            if (baseType === void 0) {\n                baseType = undefined;\n            }\n            return _super.call(this, defaultValues || {}, arrayUnion(DEFAULT_SETTERS$2, initialSetters || []), baseType) || this;\n        }\n        /**\n         * Hook to alter config and return bindings.\n         * @param config\n         */\n        ModalOpenContextBuilder.prototype.$$beforeOpen = function (config) {\n            return [];\n        };\n        /**\n         * Open a modal window based on the configuration of this config instance.\n         * @param viewContainer If set opens the modal inside the supplied viewContainer\n         * @returns Promise<DialogRef>\n         */\n        ModalOpenContextBuilder.prototype.open = function (viewContainer) {\n            var context = this.toJSON();\n            if (!(context.modal instanceof Modal)) {\n                return Promise.reject(new Error('Configuration Error: modal service not set.'));\n            }\n            var overlayConfig = {\n                context: context,\n                viewContainer: viewContainer,\n                bindings: typeof this.$$beforeOpen === 'function' && this.$$beforeOpen(context)\n            };\n            return context.modal.open(context.component, overlayConfig);\n        };\n        return ModalOpenContextBuilder;\n    }(ModalContextBuilder));\n    var __decorate$8 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n            r = Reflect.decorate(decorators, target, key, desc);\n        else\n            for (var i = decorators.length - 1; i >= 0; i--)\n                if (d = decorators[i])\n                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\n    };\n    exports.ModalModule = ModalModule_1 = (function () {\n        function ModalModule() {\n        }\n        /**\n         * Returns a ModalModule pre-loaded with a list of dynamically inserted components.\n         * Since dynamic components are not analysed by the angular compiler they must register manually\n         * using entryComponents, this is an easy way to do it.\n         * @param entryComponents A list of dynamically inserted components (dialog's).\n         * @returns {{ngModule: ModalModule, providers: {provide: OpaqueToken, useValue: Array<Type|any[]>, multi: boolean}[]}}\n         */\n        ModalModule.withComponents = function (entryComponents) {\n            return {\n                ngModule: ModalModule_1,\n                providers: [\n                    { provide: _angular_core.ANALYZE_FOR_ENTRY_COMPONENTS, useValue: entryComponents, multi: true }\n                ]\n            };\n        };\n        /**\n         * Returns a NgModule for use in the root Module.\n         * @param entryComponents A list of dynamically inserted components (dialog's).\n         * @returns ModuleWithProviders\n         */\n        ModalModule.forRoot = function (entryComponents) {\n            return {\n                ngModule: ModalModule_1,\n                providers: [\n                    exports.Overlay,\n                    { provide: OverlayRenderer, useClass: exports.DOMOverlayRenderer },\n                    { provide: _angular_platformBrowser.EVENT_MANAGER_PLUGINS, useClass: DOMOutsideEventPlugin, multi: true },\n                    { provide: _angular_core.ANALYZE_FOR_ENTRY_COMPONENTS, useValue: entryComponents || [], multi: true }\n                ]\n            };\n        };\n        return ModalModule;\n    }());\n    exports.ModalModule = ModalModule_1 = __decorate$8([\n        _angular_core.NgModule({\n            declarations: [\n                exports.ModalOverlay,\n                exports.SwapComponentDirective,\n                exports.CSSBackdrop,\n                exports.CSSDialogContainer,\n                exports.OverlayDialogBoundary,\n                exports.OverlayTarget,\n                DefaultOverlayTarget\n            ],\n            exports: [\n                exports.CSSBackdrop,\n                exports.CSSDialogContainer,\n                exports.SwapComponentDirective,\n                exports.OverlayDialogBoundary,\n                exports.OverlayTarget,\n                DefaultOverlayTarget\n            ],\n            entryComponents: [\n                exports.ModalOverlay,\n                exports.CSSBackdrop,\n                exports.CSSDialogContainer\n            ]\n        })\n    ], exports.ModalModule);\n    var ModalModule_1;\n    exports.extend = extend;\n    exports.arrayUnion = arrayUnion;\n    exports.PromiseCompleter = PromiseCompleter;\n    exports.createComponent = createComponent;\n    exports.DialogRef = DialogRef;\n    exports.OverlayRenderer = OverlayRenderer;\n    exports.Modal = Modal;\n    exports.overlayConfigFactory = overlayConfigFactory;\n    exports.OverlayContext = OverlayContext;\n    exports.OverlayContextBuilder = OverlayContextBuilder;\n    exports.DEFAULT_VALUES = DEFAULT_VALUES$1;\n    exports.ModalContext = ModalContext;\n    exports.ModalContextBuilder = ModalContextBuilder;\n    exports.ModalOpenContext = ModalOpenContext;\n    exports.ModalOpenContextBuilder = ModalOpenContextBuilder;\n    exports.privateKey = privateKey;\n    exports.setAssignMethod = setAssignMethod;\n    exports.setAssignAlias = setAssignAlias;\n    exports.FluentAssignFactory = FluentAssignFactory;\n    exports.FluentAssign = FluentAssign;\n    exports.DialogBailOutError = DialogBailOutError;\n    exports.BaseDynamicComponent = BaseDynamicComponent;\n    Object.defineProperty(exports, '__esModule', { value: true });\n})));\n","/home/travis/build/npmtest/node-npmtest-angular2-modal/node_modules/angular2-modal/bundles/angular2-modal.bootstrap.umd.js":"(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('angular2-modal'), require('@angular/core'), require('rxjs/add/operator/combineLatest'), require('@angular/common')) :\n        typeof define === 'function' && define.amd ? define(['exports', 'angular2-modal', '@angular/core', 'rxjs/add/operator/combineLatest', '@angular/common'], factory) :\n            (factory((global.angular2Modal = global.angular2Modal || {}, global.angular2Modal.plugins = global.angular2Modal.plugins || {}, global.angular2Modal.plugins.bootstrap = global.angular2Modal.plugins.bootstrap || {}), global.angular2Modal, global.ng.core, global.rxjs_add_operator_combineLatest, global.ng.common));\n}(this, (function (exports, angular2Modal, _angular_core, rxjs_add_operator_combineLatest, _angular_common) {\n    'use strict';\n    var __extends = (undefined && undefined.__extends) || function (d, b) {\n        for (var p in b)\n            if (b.hasOwnProperty(p))\n                d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var DEFAULT_VALUES = {\n        dialogClass: 'modal-dialog',\n        showClose: false\n    };\n    var DEFAULT_SETTERS = [\n        'dialogClass',\n        'size',\n        'showClose'\n    ];\n    var BSModalContext = (function (_super) {\n        __extends(BSModalContext, _super);\n        function BSModalContext() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        BSModalContext.prototype.normalize = function () {\n            if (!this.dialogClass) {\n                this.dialogClass = DEFAULT_VALUES.dialogClass;\n            }\n            _super.prototype.normalize.call(this);\n        };\n        return BSModalContext;\n    }(angular2Modal.ModalOpenContext));\n    var BSModalContextBuilder = (function (_super) {\n        __extends(BSModalContextBuilder, _super);\n        function BSModalContextBuilder(defaultValues, initialSetters, baseType) {\n            if (defaultValues === void 0) {\n                defaultValues = undefined;\n            }\n            if (initialSetters === void 0) {\n                initialSetters = undefined;\n            }\n            if (baseType === void 0) {\n                baseType = undefined;\n            }\n            return _super.call(this, angular2Modal.extend(DEFAULT_VALUES, defaultValues || {}), angular2Modal.arrayUnion(DEFAULT_SETTERS, initialSetters || []), baseType || BSModalContext // https://github.com/Microsoft/TypeScript/issues/7234\n            ) || this;\n        }\n        return BSModalContextBuilder;\n    }(angular2Modal.ModalOpenContextBuilder));\n    var __extends$1 = (undefined && undefined.__extends) || function (d, b) {\n        for (var p in b)\n            if (b.hasOwnProperty(p))\n                d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n            r = Reflect.decorate(decorators, target, key, desc);\n        else\n            for (var i = decorators.length - 1; i >= 0; i--)\n                if (d = decorators[i])\n                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\n    };\n    var __metadata = (undefined && undefined.__metadata) || function (k, v) {\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\")\n            return Reflect.metadata(k, v);\n    };\n    exports.BSModalContainer = (function (_super) {\n        __extends$1(BSModalContainer, _super);\n        function BSModalContainer(dialog, el, renderer) {\n            var _this = _super.call(this, el, renderer) || this;\n            _this.dialog = dialog;\n            _this.activateAnimationListener();\n            return _this;\n        }\n        return BSModalContainer;\n    }(angular2Modal.BaseDynamicComponent));\n    exports.BSModalContainer = __decorate([\n        _angular_core.Component({\n            selector: 'bs-modal-container',\n            host: {\n                'tabindex': '-1',\n                'role': 'dialog',\n                'class': 'modal fade',\n                'style': 'position: absolute; display: block'\n            },\n            encapsulation: _angular_core.ViewEncapsulation.None,\n            template: \"<div [ngClass]=\\\"dialog.context.dialogClass\\\" \\n      [class.modal-lg]=\\\"dialog.context.size == 'lg'\\\"\\n      [class.modal-sm]=\\\"dialog.context.size == 'sm'\\\">\\n  <div class=\\\"modal-content\\\" style=\\\"display:block\\\" role=\\\"document\\\" overlayDialogBoundary>\\n    <ng-content></ng-content>\\n  </div>    \\n</div>\"\n        }),\n        __metadata(\"design:paramtypes\", [angular2Modal.DialogRef,\n            _angular_core.ElementRef, _angular_core.Renderer])\n    ], exports.BSModalContainer);\n    var __decorate$1 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n            r = Reflect.decorate(decorators, target, key, desc);\n        else\n            for (var i = decorators.length - 1; i >= 0; i--)\n                if (d = decorators[i])\n                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\n    };\n    var __metadata$1 = (undefined && undefined.__metadata) || function (k, v) {\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\")\n            return Reflect.metadata(k, v);\n    };\n    exports.BSMessageModalTitle = (function () {\n        function BSMessageModalTitle(dialog) {\n            this.dialog = dialog;\n            this.context = dialog.context;\n        }\n        Object.defineProperty(BSMessageModalTitle.prototype, \"titleHtml\", {\n            get: function () {\n                return this.context.titleHtml ? 1 : 0;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return BSMessageModalTitle;\n    }());\n    exports.BSMessageModalTitle = __decorate$1([\n        _angular_core.Component({\n            selector: 'modal-title',\n            encapsulation: _angular_core.ViewEncapsulation.None,\n            template: \"<div [ngClass]=\\\"context.headerClass\\\" [ngSwitch]=\\\"titleHtml\\\">\\n      <button *ngIf=\\\"context.showClose\\\" type=\\\"button\\\" class=\\\"close\\\" \\n              aria-label=\\\"Close\\\" (click)=\\\"dialog.dismiss()\\\">\\n          <span aria-hidden=\\\"true\\\">\\u00D7</span>\\n      </button>\\n      <div *ngSwitchCase=\\\"1\\\" [innerHtml]=\\\"context.titleHtml\\\"></div>\\n      <h3 *ngSwitchDefault class=\\\"modal-title\\\">{{context.title}}</h3>\\n </div>\"\n        }),\n        __metadata$1(\"design:paramtypes\", [angular2Modal.DialogRef])\n    ], exports.BSMessageModalTitle);\n    exports.BSMessageModalBody = (function () {\n        function BSMessageModalBody(dialog) {\n            this.dialog = dialog;\n            this.context = dialog.context;\n        }\n        return BSMessageModalBody;\n    }());\n    exports.BSMessageModalBody = __decorate$1([\n        _angular_core.Component({\n            selector: 'modal-body',\n            encapsulation: _angular_core.ViewEncapsulation.None,\n            styles: [\".form-group {\\n    margin-top: 10px;\\n  }\"],\n            template: \"<div [ngClass]=\\\"context.bodyClass\\\"> \\n    <div [innerHtml]=\\\"context.message\\\"></div>\\n      <div *ngIf=\\\"context.showInput\\\" class=\\\"form-group\\\">\\n        <input autofocus #input\\n            name=\\\"bootstrap\\\" \\n            type=\\\"text\\\" \\n            class=\\\"form-control\\\"\\n            [value]=\\\"context.defaultValue\\\"\\n            (change)=\\\"context.defaultValue = input.value\\\"  \\n            placeholder=\\\"{{context.placeholder}}\\\">\\n      </div>\\n    </div>\\n\"\n        }),\n        __metadata$1(\"design:paramtypes\", [angular2Modal.DialogRef])\n    ], exports.BSMessageModalBody);\n    /**\n     * Represents the modal footer for storing buttons.\n     */\n    exports.BSModalFooter = (function () {\n        function BSModalFooter(dialog) {\n            this.dialog = dialog;\n        }\n        BSModalFooter.prototype.onClick = function (btn, $event) {\n            $event.stopPropagation();\n            btn.onClick(this, $event);\n        };\n        return BSModalFooter;\n    }());\n    exports.BSModalFooter = __decorate$1([\n        _angular_core.Component({\n            selector: 'modal-footer',\n            encapsulation: _angular_core.ViewEncapsulation.None,\n            template: \"<div [ngClass]=\\\"dialog.context.footerClass\\\">\\n    <button *ngFor=\\\"let btn of dialog.context.buttons;\\\"\\n            [ngClass]=\\\"btn.cssClass\\\"\\n            (click)=\\\"onClick(btn, $event)\\\">{{btn.caption}}</button>\\n</div>\"\n        }),\n        __metadata$1(\"design:paramtypes\", [angular2Modal.DialogRef])\n    ], exports.BSModalFooter);\n    /**\n     * A Component representing a generic bootstrap modal content element.\n     *\n     * By configuring a MessageModalContext instance you can:\n     *\n     *  Header:\n     *      - Set header container class (default: modal-header)\n     *      - Set title text (enclosed in H3 element)\n     *      - Set title html (overrides text)\n     *\n     *  Body:\n     *      - Set body container class.  (default: modal-body)\n     *      - Set body container HTML.\n     *\n     *  Footer:\n     *      - Set footer class.  (default: modal-footer)\n     *      - Set button configuration (from 0 to n)\n     */\n    exports.BSMessageModal = (function () {\n        function BSMessageModal(dialog) {\n            this.dialog = dialog;\n        }\n        return BSMessageModal;\n    }());\n    exports.BSMessageModal = __decorate$1([\n        _angular_core.Component({\n            selector: 'modal-content',\n            encapsulation: _angular_core.ViewEncapsulation.None,\n            template: \"<modal-title></modal-title><modal-body></modal-body><modal-footer></modal-footer>\"\n        }),\n        __metadata$1(\"design:paramtypes\", [angular2Modal.DialogRef])\n    ], exports.BSMessageModal);\n    var __extends$2 = (undefined && undefined.__extends) || function (d, b) {\n        for (var p in b)\n            if (b.hasOwnProperty(p))\n                d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var DEFAULT_VALUES$1 = {\n        component: exports.BSMessageModal,\n        headerClass: 'modal-header',\n        bodyClass: 'modal-body',\n        footerClass: 'modal-footer'\n    };\n    var DEFAULT_SETTERS$1 = [\n        'headerClass',\n        'title',\n        'titleHtml',\n        'bodyClass',\n        'footerClass'\n    ];\n    /**\n     * A Preset representing the configuration needed to open MessageModal.\n     * This is an abstract implementation with no concrete behaviour.\n     * Use derived implementation.\n     */\n    var MessageModalPresetBuilder = (function (_super) {\n        __extends$2(MessageModalPresetBuilder, _super);\n        function MessageModalPresetBuilder(defaultValues, initialSetters, baseType) {\n            if (defaultValues === void 0) {\n                defaultValues = undefined;\n            }\n            if (initialSetters === void 0) {\n                initialSetters = undefined;\n            }\n            if (baseType === void 0) {\n                baseType = undefined;\n            }\n            var _this = _super.call(this, angular2Modal.extend(angular2Modal.extend({ buttons: [] }, DEFAULT_VALUES$1), defaultValues || {}), angular2Modal.arrayUnion(DEFAULT_SETTERS$1, initialSetters || []), baseType) || this;\n            angular2Modal.setAssignAlias(_this, 'body', 'message', true);\n            return _this;\n        }\n        MessageModalPresetBuilder.prototype.addButton = function (css, caption, onClick) {\n            var btn = {\n                cssClass: css,\n                caption: caption,\n                onClick: onClick\n            };\n            var key = angular2Modal.privateKey('buttons');\n            this[key].push(btn);\n            return this;\n        };\n        return MessageModalPresetBuilder;\n    }(BSModalContextBuilder));\n    var __extends$3 = (undefined && undefined.__extends) || function (d, b) {\n        for (var p in b)\n            if (b.hasOwnProperty(p))\n                d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * A Preset for a classic 1 button modal window.\n     */\n    var OneButtonPresetBuilder = (function (_super) {\n        __extends$3(OneButtonPresetBuilder, _super);\n        function OneButtonPresetBuilder(modal, defaultValues) {\n            if (defaultValues === void 0) {\n                defaultValues = undefined;\n            }\n            return _super.call(this, angular2Modal.extend({\n                modal: modal,\n                okBtn: 'OK',\n                okBtnClass: 'btn btn-primary'\n            }, defaultValues || {}), [\n                'okBtn',\n                'okBtnClass'\n            ]) || this;\n        }\n        OneButtonPresetBuilder.prototype.$$beforeOpen = function (config) {\n            this.addButton(config.okBtnClass, config.okBtn, function (cmp, $event) { return cmp.dialog.close(true); });\n            return _super.prototype.$$beforeOpen.call(this, config);\n        };\n        return OneButtonPresetBuilder;\n    }(MessageModalPresetBuilder));\n    var __extends$4 = (undefined && undefined.__extends) || function (d, b) {\n        for (var p in b)\n            if (b.hasOwnProperty(p))\n                d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /** Common two button preset */\n    var AbstractTwoButtonPresetBuilder = (function (_super) {\n        __extends$4(AbstractTwoButtonPresetBuilder, _super);\n        function AbstractTwoButtonPresetBuilder(modal, defaultValues, initialSetters) {\n            if (defaultValues === void 0) {\n                defaultValues = undefined;\n            }\n            if (initialSetters === void 0) {\n                initialSetters = [];\n            }\n            return _super.call(this, angular2Modal.extend({\n                modal: modal,\n                okBtn: 'OK',\n                okBtnClass: 'btn btn-primary',\n                cancelBtn: 'Cancel',\n                cancelBtnClass: 'btn btn-default'\n            }, defaultValues || {}), angular2Modal.arrayUnion([\n                'okBtn',\n                'okBtnClass',\n                'cancelBtn',\n                'cancelBtnClass',\n            ], initialSetters)) || this;\n        }\n        AbstractTwoButtonPresetBuilder.prototype.$$beforeOpen = function (config) {\n            this.addButton(config.cancelBtnClass, config.cancelBtn, function (cmp, $event) { return cmp.dialog.dismiss(); });\n            return _super.prototype.$$beforeOpen.call(this, config);\n        };\n        return AbstractTwoButtonPresetBuilder;\n    }(MessageModalPresetBuilder));\n    /**\n     * A Preset for a classic 2 button modal window.\n     */\n    var TwoButtonPresetBuilder = (function (_super) {\n        __extends$4(TwoButtonPresetBuilder, _super);\n        function TwoButtonPresetBuilder(modal, defaultValues) {\n            if (defaultValues === void 0) {\n                defaultValues = undefined;\n            }\n            return _super.call(this, modal, defaultValues) || this;\n        }\n        TwoButtonPresetBuilder.prototype.$$beforeOpen = function (config) {\n            this.addButton(config.okBtnClass, config.okBtn, function (cmp, $event) { return cmp.dialog.close(true); });\n            return _super.prototype.$$beforeOpen.call(this, config);\n        };\n        return TwoButtonPresetBuilder;\n    }(AbstractTwoButtonPresetBuilder));\n    var PromptPresetBuilder = (function (_super) {\n        __extends$4(PromptPresetBuilder, _super);\n        function PromptPresetBuilder(modal, defaultValues) {\n            if (defaultValues === void 0) {\n                defaultValues = undefined;\n            }\n            return _super.call(this, modal, angular2Modal.extend({ showInput: true, defaultValue: '' }, defaultValues || {}), ['placeholder', 'defaultValue']) || this;\n        }\n        PromptPresetBuilder.prototype.$$beforeOpen = function (config) {\n            this.addButton(config.okBtnClass, config.okBtn, function (cmp, $event) {\n                return cmp.dialog.close(cmp.dialog.context.defaultValue);\n            });\n            return _super.prototype.$$beforeOpen.call(this, config);\n        };\n        return PromptPresetBuilder;\n    }(AbstractTwoButtonPresetBuilder));\n    var __extends$5 = (undefined && undefined.__extends) || function (d, b) {\n        for (var p in b)\n            if (b.hasOwnProperty(p))\n                d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var __decorate$2 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n            r = Reflect.decorate(decorators, target, key, desc);\n        else\n            for (var i = decorators.length - 1; i >= 0; i--)\n                if (d = decorators[i])\n                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\n    };\n    var __metadata$2 = (undefined && undefined.__metadata) || function (k, v) {\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\")\n            return Reflect.metadata(k, v);\n    };\n    exports.Modal = (function (_super) {\n        __extends$5(Modal$$1, _super);\n        function Modal$$1(overlay) {\n            return _super.call(this, overlay) || this;\n        }\n        Modal$$1.prototype.alert = function () {\n            return new OneButtonPresetBuilder(this, { isBlocking: false });\n        };\n        Modal$$1.prototype.prompt = function () {\n            return new PromptPresetBuilder(this, { isBlocking: true, keyboard: null });\n        };\n        Modal$$1.prototype.confirm = function () {\n            return new TwoButtonPresetBuilder(this, { isBlocking: true, keyboard: null });\n        };\n        Modal$$1.prototype.create = function (dialogRef, content, bindings) {\n            var _this = this;\n            var backdropRef = this.createBackdrop(dialogRef, angular2Modal.CSSBackdrop);\n            var containerRef = this.createContainer(dialogRef, exports.BSModalContainer, content, bindings);\n            var overlay = dialogRef.overlayRef.instance;\n            var backdrop = backdropRef.instance;\n            var container = containerRef.instance;\n            dialogRef.inElement ? overlay.insideElement() : overlay.fullscreen();\n            // add body class if this is the only dialog in the stack\n            if (!document.body.classList.contains('modal-open')) {\n                document.body.classList.add('modal-open');\n            }\n            if (dialogRef.inElement) {\n                backdrop.setStyle('position', 'absolute');\n            }\n            backdrop.addClass('modal-backdrop fade', true);\n            backdrop.addClass('in');\n            container.addClass('in');\n            if (containerRef.location.nativeElement) {\n                containerRef.location.nativeElement.focus();\n            }\n            overlay.beforeDestroy(function () {\n                var completer = new angular2Modal.PromiseCompleter();\n                backdrop.removeClass('in');\n                container.removeClass('in');\n                backdrop.myAnimationEnd$()\n                    .combineLatest(container.myAnimationEnd$(), function (s1, s2) { return [s1, s2]; })\n                    .subscribe(function (sources) {\n                    _this.overlay.groupStackLength(dialogRef) === 1 && document.body.classList.remove('modal-open');\n                    completer.resolve();\n                });\n                return completer.promise;\n            });\n            return dialogRef;\n        };\n        return Modal$$1;\n    }(angular2Modal.Modal));\n    exports.Modal = __decorate$2([\n        _angular_core.Injectable(),\n        __metadata$2(\"design:paramtypes\", [angular2Modal.Overlay])\n    ], exports.Modal);\n    var __decorate$3 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n            r = Reflect.decorate(decorators, target, key, desc);\n        else\n            for (var i = decorators.length - 1; i >= 0; i--)\n                if (d = decorators[i])\n                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\n    };\n    var providers = [\n        { provide: angular2Modal.Modal, useClass: exports.Modal },\n        { provide: exports.Modal, useClass: exports.Modal }\n    ];\n    exports.BootstrapModalModule = (function () {\n        function BootstrapModalModule() {\n        }\n        BootstrapModalModule.getProviders = function () {\n            return providers;\n        };\n        return BootstrapModalModule;\n    }());\n    exports.BootstrapModalModule = __decorate$3([\n        _angular_core.NgModule({\n            imports: [angular2Modal.ModalModule, _angular_common.CommonModule],\n            declarations: [\n                exports.BSModalFooter,\n                exports.BSMessageModalTitle,\n                exports.BSMessageModalBody,\n                exports.BSMessageModal,\n                exports.BSModalContainer\n            ],\n            providers: providers,\n            entryComponents: [\n                exports.BSModalContainer,\n                exports.BSMessageModal\n            ]\n        })\n    ], exports.BootstrapModalModule);\n    exports.BSModalContext = BSModalContext;\n    exports.BSModalContextBuilder = BSModalContextBuilder;\n    exports.MessageModalPresetBuilder = MessageModalPresetBuilder;\n    exports.ModalOpenContext = angular2Modal.ModalOpenContext;\n    exports.ModalOpenContextBuilder = angular2Modal.ModalOpenContextBuilder;\n    exports.OneButtonPresetBuilder = OneButtonPresetBuilder;\n    exports.TwoButtonPresetBuilder = TwoButtonPresetBuilder;\n    exports.PromptPresetBuilder = PromptPresetBuilder;\n    exports.providers = providers;\n    Object.defineProperty(exports, '__esModule', { value: true });\n})));\n","/home/travis/build/npmtest/node-npmtest-angular2-modal/node_modules/angular2-modal/bundles/angular2-modal.js-native.umd.js":"(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('angular2-modal')) :\n        typeof define === 'function' && define.amd ? define(['exports', '@angular/core', 'angular2-modal'], factory) :\n            (factory((global.angular2Modal = global.angular2Modal || {}, global.angular2Modal.plugins = global.angular2Modal.plugins || {}, global.angular2Modal.plugins.jsNative = global.angular2Modal.plugins.jsNative || {}), global.ng.core, global.angular2Modal));\n}(this, (function (exports, _angular_core, angular2Modal) {\n    'use strict';\n    var __extends$2 = (undefined && undefined.__extends) || function (d, b) {\n        for (var p in b)\n            if (b.hasOwnProperty(p))\n                d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var DEFAULT_SETTERS = [\n        'promptDefault'\n    ];\n    var JSNativeModalContext = (function (_super) {\n        __extends$2(JSNativeModalContext, _super);\n        function JSNativeModalContext() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        JSNativeModalContext.prototype.normalize = function () {\n            if (!this.message)\n                this.message = '';\n            if (this.dialogType === undefined)\n                this.dialogType = angular2Modal.DROP_IN_TYPE.alert;\n        };\n        return JSNativeModalContext;\n    }(angular2Modal.ModalOpenContext));\n    var JSNativeModalContextBuilder = (function (_super) {\n        __extends$2(JSNativeModalContextBuilder, _super);\n        function JSNativeModalContextBuilder(defaultValues, initialSetters, baseType) {\n            if (defaultValues === void 0) {\n                defaultValues = undefined;\n            }\n            if (initialSetters === void 0) {\n                initialSetters = undefined;\n            }\n            if (baseType === void 0) {\n                baseType = undefined;\n            }\n            return _super.call(this, defaultValues || {}, angular2Modal.arrayUnion(DEFAULT_SETTERS, initialSetters || []), baseType || JSNativeModalContext) || this;\n        }\n        return JSNativeModalContextBuilder;\n    }(angular2Modal.ModalOpenContextBuilder));\n    var __decorate$1 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n            r = Reflect.decorate(decorators, target, key, desc);\n        else\n            for (var i = decorators.length - 1; i >= 0; i--)\n                if (d = decorators[i])\n                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\n    };\n    exports.JSNativeModalRenderer = (function () {\n        function JSNativeModalRenderer() {\n        }\n        JSNativeModalRenderer.prototype.render = function (dialog, vcRef) {\n            var result;\n            switch (dialog.context.dialogType) {\n                case angular2Modal.DROP_IN_TYPE.alert:\n                    window.alert(dialog.context.message);\n                    result = true;\n                    break;\n                case angular2Modal.DROP_IN_TYPE.prompt:\n                    result = window.prompt(dialog.context.message, dialog.context.promptDefault);\n                    break;\n                case angular2Modal.DROP_IN_TYPE.confirm:\n                    result = window.confirm(dialog.context.message);\n                    break;\n            }\n            dialog.destroy = function () {\n            };\n            if (result === false) {\n                dialog.dismiss();\n            }\n            else {\n                dialog.close(result);\n            }\n            // we need to return ComponentRef<ModalOverlay> but a native dialog does'nt have that\n            // so we resolve an empty promise, the user of this renderer should expect that.\n            return {};\n        };\n        return JSNativeModalRenderer;\n    }());\n    exports.JSNativeModalRenderer = __decorate$1([\n        _angular_core.Injectable()\n    ], exports.JSNativeModalRenderer);\n    var __extends$1 = (undefined && undefined.__extends) || function (d, b) {\n        for (var p in b)\n            if (b.hasOwnProperty(p))\n                d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var JSNativePresetBuilder = (function (_super) {\n        __extends$1(JSNativePresetBuilder, _super);\n        function JSNativePresetBuilder(modal, dialogType) {\n            return _super.call(this, { modal: modal, dialogType: dialogType }) || this;\n        }\n        /**\n         * Hook to alter config and return bindings.\n         * @param config\n         */\n        JSNativePresetBuilder.prototype.$$beforeOpen = function (config) {\n            return [];\n        };\n        /**\n         * Open a modal window based on the configuration of this config instance.\n         * @param viewContainer If set opens the modal inside the supplied viewContainer\n         * @returns Promise<DialogRef>\n         */\n        JSNativePresetBuilder.prototype.open = function (viewContainer) {\n            var context = this.toJSON();\n            if (!(context.modal instanceof exports.Modal)) {\n                return Promise.reject(new Error('Configuration Error: modal service not set.'));\n            }\n            var overlayConfig = {\n                context: context,\n                renderer: new exports.JSNativeModalRenderer(),\n                viewContainer: viewContainer,\n                bindings: typeof this.$$beforeOpen === 'function' && this.$$beforeOpen(context)\n            };\n            return context.modal.open(context.component, overlayConfig);\n        };\n        return JSNativePresetBuilder;\n    }(JSNativeModalContextBuilder));\n    var __extends = (undefined && undefined.__extends) || function (d, b) {\n        for (var p in b)\n            if (b.hasOwnProperty(p))\n                d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n            r = Reflect.decorate(decorators, target, key, desc);\n        else\n            for (var i = decorators.length - 1; i >= 0; i--)\n                if (d = decorators[i])\n                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\n    };\n    var __metadata = (undefined && undefined.__metadata) || function (k, v) {\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\")\n            return Reflect.metadata(k, v);\n    };\n    exports.Modal = (function (_super) {\n        __extends(Modal$$1, _super);\n        function Modal$$1(overlay) {\n            return _super.call(this, overlay) || this;\n        }\n        Modal$$1.prototype.alert = function () {\n            return new JSNativePresetBuilder(this, angular2Modal.DROP_IN_TYPE.alert);\n        };\n        Modal$$1.prototype.prompt = function () {\n            return new JSNativePresetBuilder(this, angular2Modal.DROP_IN_TYPE.prompt);\n        };\n        Modal$$1.prototype.confirm = function () {\n            return new JSNativePresetBuilder(this, angular2Modal.DROP_IN_TYPE.confirm);\n        };\n        Modal$$1.prototype.create = function (dialogRef, type, bindings) {\n            return dialogRef;\n        };\n        return Modal$$1;\n    }(angular2Modal.Modal));\n    exports.Modal = __decorate([\n        _angular_core.Injectable(),\n        __metadata(\"design:paramtypes\", [angular2Modal.Overlay])\n    ], exports.Modal);\n    var __decorate$2 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n            r = Reflect.decorate(decorators, target, key, desc);\n        else\n            for (var i = decorators.length - 1; i >= 0; i--)\n                if (d = decorators[i])\n                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\n    };\n    var providers = [\n        { provide: angular2Modal.Modal, useClass: exports.Modal },\n        { provide: exports.Modal, useClass: exports.Modal }\n    ];\n    exports.JSNativeModalModule = (function () {\n        function JSNativeModalModule() {\n        }\n        JSNativeModalModule.getProviders = function () {\n            return providers;\n        };\n        return JSNativeModalModule;\n    }());\n    exports.JSNativeModalModule = __decorate$2([\n        _angular_core.NgModule({\n            providers: providers\n        })\n    ], exports.JSNativeModalModule);\n    exports.JSNativeModalContext = JSNativeModalContext;\n    exports.JSNativeModalContextBuilder = JSNativeModalContextBuilder;\n    exports.JSNativePresetBuilder = JSNativePresetBuilder;\n    exports.providers = providers;\n    Object.defineProperty(exports, '__esModule', { value: true });\n})));\n","/home/travis/build/npmtest/node-npmtest-angular2-modal/node_modules/angular2-modal/bundles/angular2-modal.vex.umd.js":"(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('rxjs/add/operator/first'), require('rxjs/add/operator/combineLatest'), require('@angular/core'), require('angular2-modal'), require('@angular/common')) :\n        typeof define === 'function' && define.amd ? define(['exports', 'rxjs/add/operator/first', 'rxjs/add/operator/combineLatest', '@angular/core', 'angular2-modal', '@angular/common'], factory) :\n            (factory((global.angular2Modal = global.angular2Modal || {}, global.angular2Modal.plugins = global.angular2Modal.plugins || {}, global.angular2Modal.plugins.vex = global.angular2Modal.plugins.vex || {}), global.rxjs_add_operator_first, global.rxjs_add_operator_combineLatest, global.ng.core, global.angular2Modal, global.ng.common));\n}(this, (function (exports, rxjs_add_operator_first, rxjs_add_operator_combineLatest, _angular_core, angular2Modal, _angular_common) {\n    'use strict';\n    var __decorate$1 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n            r = Reflect.decorate(decorators, target, key, desc);\n        else\n            for (var i = decorators.length - 1; i >= 0; i--)\n                if (d = decorators[i])\n                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\n    };\n    var __metadata$1 = (undefined && undefined.__metadata) || function (k, v) {\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\")\n            return Reflect.metadata(k, v);\n    };\n    /**\n     * A Dialog is a\n     */\n    exports.VEXDialogButtons = (function () {\n        function VEXDialogButtons() {\n            /**\n             * Emitted when a button was clicked\n             * @type {EventEmitter<VEXButtonClickEvent>}\n             */\n            this.onButtonClick = new _angular_core.EventEmitter();\n        }\n        VEXDialogButtons.prototype.onClick = function (btn, $event) {\n            $event.stopPropagation();\n            this.onButtonClick.emit({ btn: btn, $event: $event });\n        };\n        return VEXDialogButtons;\n    }());\n    __decorate$1([\n        _angular_core.Input(),\n        __metadata$1(\"design:type\", Array)\n    ], exports.VEXDialogButtons.prototype, \"buttons\", void 0);\n    __decorate$1([\n        _angular_core.Output(),\n        __metadata$1(\"design:type\", Object)\n    ], exports.VEXDialogButtons.prototype, \"onButtonClick\", void 0);\n    exports.VEXDialogButtons = __decorate$1([\n        _angular_core.Component({\n            selector: 'vex-dialog-buttons',\n            encapsulation: _angular_core.ViewEncapsulation.None,\n            template: \"<div class=\\\"vex-dialog-buttons\\\">\\n    <button type=\\\"button\\\" \\n         *ngFor=\\\"let btn of buttons;\\\"\\n         [class]=\\\"btn.cssClass\\\"\\n         (click)=\\\"onClick(btn, $event)\\\">{{btn.caption}}</button>\\n</div>\"\n        })\n    ], exports.VEXDialogButtons);\n    /**\n     * A Dialog with customized buttons wrapped in a form.\n     *\n     */\n    exports.DialogFormModal = (function () {\n        function DialogFormModal(dialog) {\n            this.dialog = dialog;\n            this.context = dialog.context;\n        }\n        DialogFormModal.prototype.onButtonClick = function ($event) {\n            $event.btn.onClick(this, $event.$event);\n        };\n        return DialogFormModal;\n    }());\n    exports.DialogFormModal = __decorate$1([\n        _angular_core.Component({\n            selector: 'modal-dialog',\n            encapsulation: _angular_core.ViewEncapsulation.None,\n            template: \"<form class=\\\"vex-dialog-form\\\">\\n    <template [swapCmp]=\\\"context.content\\\"></template>\\n    <vex-dialog-buttons [buttons]=\\\"context.buttons\\\"\\n                        (onButtonClick)=\\\"onButtonClick($event)\\\"></vex-dialog-buttons>\\n</form>\"\n        }),\n        __metadata$1(\"design:paramtypes\", [angular2Modal.DialogRef])\n    ], exports.DialogFormModal);\n    exports.FormDropIn = (function () {\n        function FormDropIn(dialog) {\n            this.dialog = dialog;\n            this.context = dialog.context;\n        }\n        return FormDropIn;\n    }());\n    exports.FormDropIn = __decorate$1([\n        _angular_core.Component({\n            selector: 'drop-in-dialog',\n            encapsulation: _angular_core.ViewEncapsulation.None,\n            template: \"<div class=\\\"vex-dialog-message\\\">{{context.message}}</div>\\n <div *ngIf=\\\"context.showInput\\\" class=\\\"vex-dialog-input\\\">\\n   <input #input\\n          autofocus\\n          name=\\\"vex\\\" \\n          type=\\\"text\\\" \\n          class=\\\"vex-dialog-prompt-input\\\"\\n           (change)=\\\"context.defaultResult = input.value\\\" \\n          placeholder=\\\"{{context.placeholder}}\\\">\\n </div>\\n <div *ngIf=\\\"context.showCloseButton\\\" \\n      [class]=\\\"context.closeClassName\\\"\\n      (click)=\\\"dialog.dismiss()\\\"></div>\"\n        }),\n        __metadata$1(\"design:paramtypes\", [angular2Modal.DialogRef])\n    ], exports.FormDropIn);\n    var __extends$3 = (undefined && undefined.__extends) || function (d, b) {\n        for (var p in b)\n            if (b.hasOwnProperty(p))\n                d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var DEFAULT_VALUES$1 = {\n        className: 'default',\n        overlayClassName: 'vex-overlay',\n        contentClassName: 'vex-content',\n        closeClassName: 'vex-close'\n    };\n    var DEFAULT_SETTERS$2 = [\n        'className',\n        'overlayClassName',\n        'contentClassName',\n        'closeClassName',\n        'showCloseButton'\n    ];\n    var VEXModalContext = (function (_super) {\n        __extends$3(VEXModalContext, _super);\n        function VEXModalContext() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        VEXModalContext.prototype.normalize = function () {\n            if (!this.className) {\n                this.className = DEFAULT_VALUES$1.className;\n            }\n            if (!this.overlayClassName) {\n                this.overlayClassName = DEFAULT_VALUES$1.overlayClassName;\n            }\n            if (!this.contentClassName) {\n                this.contentClassName = DEFAULT_VALUES$1.contentClassName;\n            }\n            if (!this.closeClassName) {\n                this.closeClassName = DEFAULT_VALUES$1.closeClassName;\n            }\n            _super.prototype.normalize.call(this);\n        };\n        return VEXModalContext;\n    }(angular2Modal.ModalOpenContext));\n    var VEXModalContextBuilder = (function (_super) {\n        __extends$3(VEXModalContextBuilder, _super);\n        function VEXModalContextBuilder(defaultValues, initialSetters, baseType) {\n            if (defaultValues === void 0) {\n                defaultValues = undefined;\n            }\n            if (initialSetters === void 0) {\n                initialSetters = undefined;\n            }\n            if (baseType === void 0) {\n                baseType = undefined;\n            }\n            return _super.call(this, angular2Modal.extend(DEFAULT_VALUES$1, defaultValues || {}), angular2Modal.arrayUnion(DEFAULT_SETTERS$2, initialSetters || []), baseType || VEXModalContext // https://github.com/Microsoft/TypeScript/issues/7234\n            ) || this;\n        }\n        /**\n         *\n         * @aliasFor isBlocking\n         */\n        VEXModalContextBuilder.prototype.overlayClosesOnClick = function (value) {\n            this[angular2Modal.privateKey('isBlocking')] = !value;\n            return this;\n        };\n        return VEXModalContextBuilder;\n    }(angular2Modal.ModalOpenContextBuilder));\n    var __extends$2 = (undefined && undefined.__extends) || function (d, b) {\n        for (var p in b)\n            if (b.hasOwnProperty(p))\n                d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var DEFAULT_SETTERS$1 = [\n        'content'\n    ];\n    /**\n     * Data definition\n     */\n    var DialogPreset = (function (_super) {\n        __extends$2(DialogPreset, _super);\n        function DialogPreset() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        return DialogPreset;\n    }(VEXModalContext));\n    /**\n     * A Preset representing the configuration needed to open MessageModal.\n     * This is an abstract implementation with no concrete behaviour.\n     * Use derived implementation.\n     */\n    var DialogPresetBuilder = (function (_super) {\n        __extends$2(DialogPresetBuilder, _super);\n        function DialogPresetBuilder(modal, defaultValues, initialSetters, baseType) {\n            if (defaultValues === void 0) {\n                defaultValues = undefined;\n            }\n            if (initialSetters === void 0) {\n                initialSetters = undefined;\n            }\n            if (baseType === void 0) {\n                baseType = undefined;\n            }\n            return _super.call(this, angular2Modal.extend({ modal: modal, component: exports.DialogFormModal, buttons: [], defaultResult: true }, defaultValues || {}), angular2Modal.arrayUnion(DEFAULT_SETTERS$1, initialSetters || []), baseType || DialogPreset // https://github.com/Microsoft/TypeScript/issues/7234\n            ) || this;\n        }\n        DialogPresetBuilder.prototype.addButton = function (css, caption, onClick) {\n            var btn = {\n                cssClass: css,\n                caption: caption,\n                onClick: onClick\n            };\n            var key = angular2Modal.privateKey('buttons');\n            this[key].push(btn);\n            return this;\n        };\n        DialogPresetBuilder.prototype.addOkButton = function (text) {\n            if (text === void 0) {\n                text = 'OK';\n            }\n            this.addButton('vex-dialog-button-primary vex-dialog-button vex-first', text, function (cmp, $event) { return cmp.dialog.close(cmp.dialog.context.defaultResult); });\n            return this;\n        };\n        DialogPresetBuilder.prototype.addCancelButton = function (text) {\n            if (text === void 0) {\n                text = 'CANCEL';\n            }\n            this.addButton('vex-dialog-button-secondary vex-dialog-button vex-last', text, function (cmp, $event) { return cmp.dialog.dismiss(); });\n            return this;\n        };\n        return DialogPresetBuilder;\n    }(VEXModalContextBuilder));\n    var __extends$1 = (undefined && undefined.__extends) || function (d, b) {\n        for (var p in b)\n            if (b.hasOwnProperty(p))\n                d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var DEFAULT_VALUES = {\n        component: exports.DialogFormModal,\n        content: exports.FormDropIn,\n        okBtn: 'OK',\n        cancelBtn: 'Cancel'\n    };\n    var DEFAULT_SETTERS = [\n        'okBtn',\n        'cancelBtn',\n        'placeholder'\n    ];\n    /**\n     * Data definition\n     */\n    var DropInPreset = (function (_super) {\n        __extends$1(DropInPreset, _super);\n        function DropInPreset() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        Object.defineProperty(DropInPreset.prototype, \"showInput\", {\n            get: function () {\n                return this.dropInType === angular2Modal.DROP_IN_TYPE.prompt;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return DropInPreset;\n    }(DialogPreset));\n    /**\n     * A Preset representing all 3 drop ins (alert, prompt, confirm)\n     */\n    var DropInPresetBuilder = (function (_super) {\n        __extends$1(DropInPresetBuilder, _super);\n        function DropInPresetBuilder(modal, dropInType, defaultValues) {\n            if (defaultValues === void 0) {\n                defaultValues = undefined;\n            }\n            return _super.call(this, modal, angular2Modal.extend(angular2Modal.extend({ modal: modal, dropInType: dropInType }, DEFAULT_VALUES), defaultValues || {}), DEFAULT_SETTERS, DropInPreset) || this;\n        }\n        DropInPresetBuilder.prototype.$$beforeOpen = function (config) {\n            if (config.okBtn) {\n                this.addOkButton(config.okBtn);\n            }\n            switch (config.dropInType) {\n                case angular2Modal.DROP_IN_TYPE.prompt:\n                    config.defaultResult = undefined;\n                case angular2Modal.DROP_IN_TYPE.confirm:\n                    if (config.cancelBtn) {\n                        this.addCancelButton(config.cancelBtn);\n                    }\n                    break;\n            }\n            return _super.prototype.$$beforeOpen.call(this, config);\n        };\n        return DropInPresetBuilder;\n    }(DialogPresetBuilder));\n    var __extends = (undefined && undefined.__extends) || function (d, b) {\n        for (var p in b)\n            if (b.hasOwnProperty(p))\n                d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n            r = Reflect.decorate(decorators, target, key, desc);\n        else\n            for (var i = decorators.length - 1; i >= 0; i--)\n                if (d = decorators[i])\n                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\n    };\n    var __metadata = (undefined && undefined.__metadata) || function (k, v) {\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\")\n            return Reflect.metadata(k, v);\n    };\n    exports.Modal = (function (_super) {\n        __extends(Modal$$1, _super);\n        function Modal$$1(overlay) {\n            return _super.call(this, overlay) || this;\n        }\n        Modal$$1.prototype.alert = function () {\n            return new DropInPresetBuilder(this, angular2Modal.DROP_IN_TYPE.alert, { isBlocking: false });\n        };\n        Modal$$1.prototype.prompt = function () {\n            return new DropInPresetBuilder(this, angular2Modal.DROP_IN_TYPE.prompt, {\n                isBlocking: true,\n                keyboard: null\n            });\n        };\n        Modal$$1.prototype.confirm = function () {\n            return new DropInPresetBuilder(this, angular2Modal.DROP_IN_TYPE.confirm, {\n                isBlocking: true,\n                keyboard: null\n            });\n        };\n        Modal$$1.prototype.create = function (dialogRef, content, bindings) {\n            var _this = this;\n            var backdropRef = this.createBackdrop(dialogRef, angular2Modal.CSSBackdrop);\n            var containerRef = this.createContainer(dialogRef, angular2Modal.CSSDialogContainer, content, bindings);\n            var overlay = dialogRef.overlayRef.instance;\n            var backdrop = backdropRef.instance;\n            var container = containerRef.instance;\n            dialogRef.inElement ? overlay.insideElement() : overlay.fullscreen();\n            // add body class if this is the only dialog in the stack\n            if (!document.body.classList.contains('vex-open')) {\n                document.body.classList.add('vex-open');\n            }\n            overlay.addClass(\"vex vex-theme-\" + dialogRef.context.className);\n            backdrop.addClass('vex-overlay');\n            container.addClass(dialogRef.context.contentClassName);\n            container.setStyle('display', 'block');\n            if (dialogRef.inElement) {\n                overlay.setStyle('padding', '0');\n                container.setStyle('margin-top', '20px');\n            }\n            if (containerRef.location.nativeElement) {\n                containerRef.location.nativeElement.focus();\n            }\n            if (dialogRef.context.className === 'bottom-right-corner') {\n                overlay.setStyle('overflow-y', 'hidden');\n                container.setStyle('position', 'absolute');\n            }\n            overlay.beforeDestroy(function () {\n                overlay.addClass('vex-closing');\n                var completer = new angular2Modal.PromiseCompleter();\n                var animationEnd$ = container.myAnimationEnd$();\n                if (dialogRef.context.className !== 'bottom-right-corner') {\n                    animationEnd$ = animationEnd$.combineLatest(backdrop.myAnimationEnd$(), function (s1, s2) { return [s1, s2]; });\n                }\n                animationEnd$.subscribe(function (sources) {\n                    _this.overlay.groupStackLength(dialogRef) === 1 && document.body.classList.remove('vex-open');\n                    completer.resolve();\n                });\n                return completer.promise;\n            });\n            overlay.setClickBoundary(containerRef.location.nativeElement);\n            return dialogRef;\n        };\n        return Modal$$1;\n    }(angular2Modal.Modal));\n    exports.Modal = __decorate([\n        _angular_core.Injectable(),\n        __metadata(\"design:paramtypes\", [angular2Modal.Overlay])\n    ], exports.Modal);\n    var __decorate$2 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n            r = Reflect.decorate(decorators, target, key, desc);\n        else\n            for (var i = decorators.length - 1; i >= 0; i--)\n                if (d = decorators[i])\n                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\n    };\n    var providers = [\n        { provide: angular2Modal.Modal, useClass: exports.Modal },\n        { provide: exports.Modal, useClass: exports.Modal }\n    ];\n    exports.VexModalModule = (function () {\n        function VexModalModule() {\n        }\n        VexModalModule.getProviders = function () {\n            return providers;\n        };\n        return VexModalModule;\n    }());\n    exports.VexModalModule = __decorate$2([\n        _angular_core.NgModule({\n            imports: [angular2Modal.ModalModule, _angular_common.CommonModule],\n            declarations: [\n                exports.VEXDialogButtons,\n                exports.FormDropIn,\n                exports.DialogFormModal\n            ],\n            providers: providers,\n            entryComponents: [\n                exports.DialogFormModal,\n                exports.FormDropIn\n            ]\n        })\n    ], exports.VexModalModule);\n    exports.VEXModalContext = VEXModalContext;\n    exports.VEXModalContextBuilder = VEXModalContextBuilder;\n    exports.DropInPreset = DropInPreset;\n    exports.DropInPresetBuilder = DropInPresetBuilder;\n    exports.DialogPreset = DialogPreset;\n    exports.DialogPresetBuilder = DialogPresetBuilder;\n    exports.providers = providers;\n    Object.defineProperty(exports, '__esModule', { value: true });\n})));\n","/home/travis/build/npmtest/node-npmtest-angular2-modal/node_modules/angular2-modal/esm/angular2-modal.js":"// WEBPACK development runtime helper.\nexport * from './index';\n//# sourceMappingURL=angular2-modal.js.map","/home/travis/build/npmtest/node-npmtest-angular2-modal/node_modules/angular2-modal/esm/angular2-modal.module.js":"var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { ANALYZE_FOR_ENTRY_COMPONENTS, NgModule } from '@angular/core';\nimport { EVENT_MANAGER_PLUGINS } from '@angular/platform-browser';\nimport { DOMOutsideEventPlugin, DOMOverlayRenderer } from './providers/index';\nimport { OverlayRenderer } from './models/tokens';\nimport { SwapComponentDirective, CSSBackdrop, CSSDialogContainer } from './components/index';\nimport { Overlay, ModalOverlay, OverlayDialogBoundary, OverlayTarget, DefaultOverlayTarget } from './overlay/index';\nvar ModalModule = ModalModule_1 = (function () {\n    function ModalModule() {\n    }\n    /**\n     * Returns a ModalModule pre-loaded with a list of dynamically inserted components.\n     * Since dynamic components are not analysed by the angular compiler they must register manually\n     * using entryComponents, this is an easy way to do it.\n     * @param entryComponents A list of dynamically inserted components (dialog's).\n     * @returns {{ngModule: ModalModule, providers: {provide: OpaqueToken, useValue: Array<Type|any[]>, multi: boolean}[]}}\n     */\n    ModalModule.withComponents = function (entryComponents) {\n        return {\n            ngModule: ModalModule_1,\n            providers: [\n                { provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: entryComponents, multi: true }\n            ]\n        };\n    };\n    /**\n     * Returns a NgModule for use in the root Module.\n     * @param entryComponents A list of dynamically inserted components (dialog's).\n     * @returns ModuleWithProviders\n     */\n    ModalModule.forRoot = function (entryComponents) {\n        return {\n            ngModule: ModalModule_1,\n            providers: [\n                Overlay,\n                { provide: OverlayRenderer, useClass: DOMOverlayRenderer },\n                { provide: EVENT_MANAGER_PLUGINS, useClass: DOMOutsideEventPlugin, multi: true },\n                { provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: entryComponents || [], multi: true }\n            ]\n        };\n    };\n    return ModalModule;\n}());\nModalModule = ModalModule_1 = __decorate([\n    NgModule({\n        declarations: [\n            ModalOverlay,\n            SwapComponentDirective,\n            CSSBackdrop,\n            CSSDialogContainer,\n            OverlayDialogBoundary,\n            OverlayTarget,\n            DefaultOverlayTarget\n        ],\n        exports: [\n            CSSBackdrop,\n            CSSDialogContainer,\n            SwapComponentDirective,\n            OverlayDialogBoundary,\n            OverlayTarget,\n            DefaultOverlayTarget\n        ],\n        entryComponents: [\n            ModalOverlay,\n            CSSBackdrop,\n            CSSDialogContainer\n        ]\n    })\n], ModalModule);\nexport { ModalModule };\nvar ModalModule_1;\n//# sourceMappingURL=angular2-modal.module.js.map","/home/travis/build/npmtest/node-npmtest-angular2-modal/node_modules/angular2-modal/esm/index.js":"export * from './framework/fluent-assign';\nexport { extend, arrayUnion, PromiseCompleter } from './framework/utils';\nexport { createComponent } from './framework/createComponent';\nexport * from './models/errors';\nexport { DialogRef } from './models/dialog-ref';\nexport { DROP_IN_TYPE, OverlayRenderer } from './models/tokens';\nexport { Modal, DOMOverlayRenderer } from './providers/index';\nexport { overlayConfigFactory, OverlayContext, OverlayContextBuilder } from './models/overlay-context';\nexport { Overlay, ModalOverlay, OverlayDialogBoundary, OverlayTarget } from './overlay/index';\nexport { DEFAULT_VALUES, ModalContext, ModalContextBuilder } from './models/modal-context';\nexport { ModalOpenContext, ModalOpenContextBuilder } from './models/modal-open-context';\nexport * from './components/index';\nexport { ModalModule } from './angular2-modal.module';\n//# sourceMappingURL=index.js.map","/home/travis/build/npmtest/node-npmtest-angular2-modal/node_modules/angular2-modal/esm/components/base-dynamic-component.js":"import { Subject } from 'rxjs/Subject';\nimport 'rxjs/add/operator/filter';\nimport { createComponent } from '../framework/createComponent';\nvar BROWSER_PREFIX = ['webkit', 'moz', 'MS', 'o', ''];\nfunction register(eventName, element, cb) {\n    BROWSER_PREFIX.forEach(function (p) {\n        element.addEventListener(p ? p + eventName : eventName.toLowerCase(), cb, false);\n    });\n}\n/**\n * A base class for supporting dynamic components.\n * There are 3 main support areas:\n * 1 - Easy wrapper for dynamic styling via CSS classes and inline styles.\n * 2 - Easy wrapper for interception of transition/animation end events.\n * 3 - Easy wrapper for component creation and injection.\n *\n * Dynamic css is done via direct element manipulation (via renderer), it does not use change detection\n * or binding. This is to allow better control over animation.\n *\n * Animation support is limited, only transition/keyframes END even are notified.\n * The animation support is needed since currently the angular animation module is limited as well and\n * does not support CSS animation that are not pre-parsed and are not in the styles metadata of a component.\n *\n * Capabilities: Add/Remove styls, Add/Remove classes, listen to animation/transition end event,\n * add components\n */\nvar BaseDynamicComponent = (function () {\n    function BaseDynamicComponent(el, renderer) {\n        this.el = el;\n        this.renderer = renderer;\n    }\n    BaseDynamicComponent.prototype.activateAnimationListener = function () {\n        var _this = this;\n        if (this.animationEnd)\n            return;\n        this.animationEnd = new Subject();\n        this.animationEnd$ = this.animationEnd.asObservable();\n        register('TransitionEnd', this.el.nativeElement, function (e) { return _this.onEnd(e); });\n        register('AnimationEnd', this.el.nativeElement, function (e) { return _this.onEnd(e); });\n    };\n    /**\n     * Set a specific inline style on the overlay host element.\n     * @param prop The style key\n     * @param value The value, undefined to remove\n     * @returns {ModalOverlay}\n     */\n    BaseDynamicComponent.prototype.setStyle = function (prop, value) {\n        this.renderer.setElementStyle(this.el.nativeElement, prop, value);\n        return this;\n    };\n    BaseDynamicComponent.prototype.forceReflow = function () {\n        this.el.nativeElement.offsetWidth;\n    };\n    BaseDynamicComponent.prototype.addClass = function (css, forceReflow) {\n        var _this = this;\n        if (forceReflow === void 0) { forceReflow = false; }\n        css.split(' ')\n            .forEach(function (c) { return _this.renderer.setElementClass(_this.el.nativeElement, c, true); });\n        if (forceReflow)\n            this.forceReflow();\n    };\n    BaseDynamicComponent.prototype.removeClass = function (css, forceReflow) {\n        var _this = this;\n        if (forceReflow === void 0) { forceReflow = false; }\n        css.split(' ')\n            .forEach(function (c) { return _this.renderer.setElementClass(_this.el.nativeElement, c, false); });\n        if (forceReflow)\n            this.forceReflow();\n    };\n    BaseDynamicComponent.prototype.ngOnDestroy = function () {\n        if (this.animationEnd && !this.animationEnd.closed) {\n            this.animationEnd.complete();\n        }\n    };\n    BaseDynamicComponent.prototype.myAnimationEnd$ = function () {\n        var _this = this;\n        return this.animationEnd$\n            .filter(function (e) { return e.target === _this.el.nativeElement; });\n    };\n    /**\n     * Add a component, supply a view container ref.\n     * Note: The components vcRef will result in a sibling.\n     * @param component The component to add\n     * @param vcRef The container to add to\n     * @param bindings Bindings to use (added on top of the ViewContainerRef)\n     * @returns {Promise<ComponentRef<any>>}\n     */\n    BaseDynamicComponent.prototype._addComponent = function (instructions) {\n        var cmpRef = createComponent(instructions);\n        cmpRef.changeDetectorRef.detectChanges();\n        return cmpRef;\n    };\n    BaseDynamicComponent.prototype.onEnd = function (event) {\n        if (!this.animationEnd.closed) {\n            this.animationEnd.next(event);\n        }\n    };\n    return BaseDynamicComponent;\n}());\nexport { BaseDynamicComponent };\n//# sourceMappingURL=base-dynamic-component.js.map","/home/travis/build/npmtest/node-npmtest-angular2-modal/node_modules/angular2-modal/esm/components/css-backdrop.js":"var __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { Component, ElementRef, ViewEncapsulation, Renderer } from '@angular/core';\nimport { BaseDynamicComponent } from './base-dynamic-component';\n/**\n * Represents the modal backdrop shaped by CSS.\n */\nvar CSSBackdrop = (function (_super) {\n    __extends(CSSBackdrop, _super);\n    function CSSBackdrop(el, renderer) {\n        var _this = _super.call(this, el, renderer) || this;\n        _this.activateAnimationListener();\n        var style = {\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            width: '100%',\n            height: '100%'\n        };\n        Object.keys(style).forEach(function (k) { return _this.setStyle(k, style[k]); });\n        return _this;\n    }\n    return CSSBackdrop;\n}(BaseDynamicComponent));\nCSSBackdrop = __decorate([\n    Component({\n        selector: 'css-backdrop',\n        host: {\n            '[attr.class]': 'cssClass',\n            '[attr.style]': 'styleStr'\n        },\n        encapsulation: ViewEncapsulation.None,\n        template: \"\"\n    }),\n    __metadata(\"design:paramtypes\", [ElementRef, Renderer])\n], CSSBackdrop);\nexport { CSSBackdrop };\n//# sourceMappingURL=css-backdrop.js.map","/home/travis/build/npmtest/node-npmtest-angular2-modal/node_modules/angular2-modal/esm/components/css-dialog-container.js":"var __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { Component, ViewEncapsulation, ElementRef, Renderer } from '@angular/core';\nimport { BaseDynamicComponent } from './base-dynamic-component';\nimport { DialogRef } from '../models/dialog-ref';\n/**\n * A component that acts as a top level container for an open modal window.\n */\nvar CSSDialogContainer = (function (_super) {\n    __extends(CSSDialogContainer, _super);\n    function CSSDialogContainer(dialog, el, renderer) {\n        var _this = _super.call(this, el, renderer) || this;\n        _this.dialog = dialog;\n        _this.activateAnimationListener();\n        return _this;\n    }\n    return CSSDialogContainer;\n}(BaseDynamicComponent));\nCSSDialogContainer = __decorate([\n    Component({\n        selector: 'css-dialog-container',\n        host: {\n            'tabindex': '-1',\n            'role': 'dialog'\n        },\n        encapsulation: ViewEncapsulation.None,\n        template: \"<ng-content></ng-content>\"\n    }),\n    __metadata(\"design:paramtypes\", [DialogRef,\n        ElementRef, Renderer])\n], CSSDialogContainer);\nexport { CSSDialogContainer };\n//# sourceMappingURL=css-dialog-container.js.map","/home/travis/build/npmtest/node-npmtest-angular2-modal/node_modules/angular2-modal/esm/components/index.js":"export { SwapComponentDirective } from './swap-component.directive';\nexport { BaseDynamicComponent } from './base-dynamic-component';\nexport { CSSBackdrop } from './css-backdrop';\nexport { CSSDialogContainer } from './css-dialog-container';\n//# sourceMappingURL=index.js.map","/home/travis/build/npmtest/node-npmtest-angular2-modal/node_modules/angular2-modal/esm/components/swap-component.directive.js":"var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { Directive, Input, Output, ReflectiveInjector, ViewContainerRef, ComponentFactoryResolver, EventEmitter, TemplateRef, Injector } from '@angular/core';\n// <template [dynCmp]=\"myCmp\" [dynCmpBindings]=\"myBindings\"></template>\n// <template [dynCmp]=\"ctx.component\" [dynCmpBindings]=\"ctx.bindings\" [dynCmpProjectables]=\"ctx.projectableNodes\"></template>\nvar SwapComponentDirective = (function () {\n    function SwapComponentDirective(cfr, vcRef, tRef) {\n        this.cfr = cfr;\n        this.vcRef = vcRef;\n        this.tRef = tRef;\n        this.onCreate = new EventEmitter(false);\n    }\n    Object.defineProperty(SwapComponentDirective.prototype, \"swapCmp\", {\n        set: function (component) {\n            this.component = component;\n            this.vcRef.clear();\n            if (this.component) {\n                var injector = this.swapCmpInjector || this.vcRef.parentInjector;\n                if (Array.isArray(this.swapCmpBindings) && this.swapCmpBindings.length > 0) {\n                    injector = ReflectiveInjector.fromResolvedProviders(this.swapCmpBindings, injector);\n                }\n                var cmpRef = this.vcRef.createComponent(this.cfr.resolveComponentFactory(component), this.vcRef.length, injector, this.swapCmpProjectables);\n                cmpRef.changeDetectorRef.detectChanges();\n                this.onCreate.emit(cmpRef);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return SwapComponentDirective;\n}());\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Array)\n], SwapComponentDirective.prototype, \"swapCmpBindings\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Injector)\n], SwapComponentDirective.prototype, \"swapCmpInjector\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Array)\n], SwapComponentDirective.prototype, \"swapCmpProjectables\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], SwapComponentDirective.prototype, \"onCreate\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object),\n    __metadata(\"design:paramtypes\", [Object])\n], SwapComponentDirective.prototype, \"swapCmp\", null);\nSwapComponentDirective = __decorate([\n    Directive({\n        selector: '[swapCmp]'\n    }),\n    __metadata(\"design:paramtypes\", [ComponentFactoryResolver,\n        ViewContainerRef,\n        TemplateRef])\n], SwapComponentDirective);\nexport { SwapComponentDirective };\n//# sourceMappingURL=swap-component.directive.js.map","/home/travis/build/npmtest/node-npmtest-angular2-modal/node_modules/angular2-modal/esm/framework/createComponent.js":"import { ComponentFactoryResolver, ReflectiveInjector } from '@angular/core';\nexport function createComponent(instructions) {\n    var injector = getInjector(instructions);\n    return instructions.vcRef.createComponent(injector.get(ComponentFactoryResolver).resolveComponentFactory(instructions.component), instructions.vcRef.length, injector, instructions.projectableNodes);\n}\nfunction getInjector(instructions) {\n    var ctxInjector = instructions.injector || instructions.vcRef.parentInjector;\n    return Array.isArray(instructions.bindings) && instructions.bindings.length > 0 ?\n        ReflectiveInjector.fromResolvedProviders(instructions.bindings, ctxInjector) : ctxInjector;\n}\n//# sourceMappingURL=createComponent.js.map","/home/travis/build/npmtest/node-npmtest-angular2-modal/node_modules/angular2-modal/esm/framework/fluent-assign.js":"var PRIVATE_PREFIX = '$$';\nvar RESERVED_REGEX = /^(\\$\\$).*/;\nfunction validateMethodName(name) {\n    if (!name) {\n        throw new Error(\"Illegal method name. Empty method name is not allowed\");\n    }\n    else if (name in this) {\n        throw new Error(\"A member name '\" + name + \"' already defined.\");\n    }\n}\n/**\n * Returns a list of assigned property names (non private)\n * @param subject\n * @returns {string[]}\n */\nfunction getAssignedPropertyNames(subject) {\n    return Object.getOwnPropertyNames(subject)\n        .filter(function (name) { return RESERVED_REGEX.test(name); })\n        .map(function (name) { return name.substr(2); });\n}\nexport function privateKey(name) {\n    return PRIVATE_PREFIX + name;\n}\nfunction objectDefinePropertyValue(obj, propertyName, value) {\n    Object.defineProperty(obj, propertyName, {\n        configurable: false,\n        enumerable: false,\n        writable: false,\n        value: value\n    });\n}\n/**\n * Given a FluentAssign instance, apply all of the supplied default values so calling\n * instance.toJSON will return those values (does not create a setter function)\n * @param instance\n * @param defaultValues\n */\nfunction applyDefaultValues(instance, defaultValues) {\n    Object.getOwnPropertyNames(defaultValues)\n        .forEach(function (name) { return instance[privateKey(name)] = defaultValues[name]; });\n}\n/**\n * Create a function for setting a value for a property on a given object.\n * @param obj The object to apply the key & setter on.\n * @param propertyName The name of the property on the object\n * @param writeOnce If true will allow writing once (default: false)\n *\n * Example:\n * let obj = new FluentAssign<any>;\n * setAssignMethod(obj, 'myProp');\n * obj.myProp('someValue');\n * const result = obj.toJSON();\n * console.log(result); //{ myProp: 'someValue' }\n *\n *\n * let obj = new FluentAssign<any>;\n * setAssignMethod(obj, 'myProp', true); // applying writeOnce\n * obj.myProp('someValue');\n * obj.myProp('someValue'); // ERROR: Overriding config property 'myProp' is not allowed.\n */\nexport function setAssignMethod(obj, propertyName, writeOnce) {\n    var _this = this;\n    if (writeOnce === void 0) { writeOnce = false; }\n    validateMethodName.call(obj, propertyName);\n    var key = privateKey(propertyName);\n    objectDefinePropertyValue(obj, propertyName, function (value) {\n        if (writeOnce && _this.hasOwnProperty(key)) {\n            throw new Error(\"Overriding config property '\" + propertyName + \"' is not allowed.\");\n        }\n        obj[key] = value;\n        return obj;\n    });\n}\n/**\n * Create a function for setting a value that is an alias to an other setter function.\n * @param obj The object to apply the key & setter on.\n * @param propertyName The name of the property on the object\n * @param srcPropertyName The name of the property on the object this alias points to\n * @param hard If true, will set a readonly property on the object that returns\n *        the value of the source property. Default: false\n *\n * Example:\n * let obj = new FluentAssign<any> ;\n * setAssignMethod(obj, 'myProp');\n * setAssignAlias(obj, 'myPropAlias', 'myProp');\n * obj.myPropAlias('someValue');\n * const result = obj.toJSON();\n * console.log(result); //{ myProp: 'someValue' }\n * result.myPropAlias // undefined\n *\n *\n * let obj = new FluentAssign<any> ;\n * setAssignMethod(obj, 'myProp');\n * setAssignAlias(obj, 'myPropAlias', 'myProp', true); // setting a hard alias.\n * obj.myPropAlias('someValue');\n * const result = obj.toJSON();\n * console.log(result); //{ myProp: 'someValue' }\n * result.myPropAlias // someValue\n */\nexport function setAssignAlias(obj, propertyName, srcPropertyName, hard) {\n    if (hard === void 0) { hard = false; }\n    validateMethodName.call(obj, propertyName);\n    objectDefinePropertyValue(obj, propertyName, function (value) {\n        obj[srcPropertyName](value);\n        return obj;\n    });\n    if (hard === true) {\n        var key = privateKey(propertyName), srcKey_1 = privateKey(srcPropertyName);\n        Object.defineProperty(obj, key, {\n            configurable: false,\n            enumerable: false,\n            get: function () { return obj[srcKey_1]; }\n        });\n    }\n}\n/**\n * Represent a fluent API factory wrapper for defining FluentAssign instances.\n */\nvar FluentAssignFactory = (function () {\n    function FluentAssignFactory(fluentAssign) {\n        this._fluentAssign =\n            fluentAssign instanceof FluentAssign ? fluentAssign : new FluentAssign();\n    }\n    /**\n     * Create a setter method on the FluentAssign instance.\n     * @param name The name of the setter function.\n     * @param defaultValue If set (not undefined) set's the value on the instance immediately.\n     * @returns {FluentAssignFactory}\n     */\n    FluentAssignFactory.prototype.setMethod = function (name, defaultValue) {\n        if (defaultValue === void 0) { defaultValue = undefined; }\n        setAssignMethod(this._fluentAssign, name);\n        if (defaultValue !== undefined) {\n            this._fluentAssign[name](defaultValue);\n        }\n        return this;\n    };\n    Object.defineProperty(FluentAssignFactory.prototype, \"fluentAssign\", {\n        /**\n         * The FluentAssign instance.\n         * @returns {FluentAssign<T>}\n         */\n        get: function () {\n            return this._fluentAssign;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return FluentAssignFactory;\n}());\nexport { FluentAssignFactory };\n/**\n * Represent an object where every property is a function representing an assignment function.\n * Calling each function with a value will assign the value to the object and return the object.\n * Calling 'toJSON' returns an object with the same properties but this time representing the\n * assigned values.\n *\n * This allows setting an object in a fluent API manner.\n * Example:\n let fluent = new FluentAssign<any>(undefined, ['some', 'went']);\n fluent.some('thing').went('wrong').toJSON();\n // { some: 'thing', went: 'wrong' }\n */\nvar FluentAssign = (function () {\n    /**\n     *\n     * @param defaultValues An object representing default values for the underlying object.\n     * @param initialSetters A list of initial setters for this FluentAssign.\n     * @param baseType the class/type to create a new base. optional, {} is used if not supplied.\n     */\n    function FluentAssign(defaultValues, initialSetters, baseType) {\n        if (defaultValues === void 0) { defaultValues = undefined; }\n        if (initialSetters === void 0) { initialSetters = undefined; }\n        if (baseType === void 0) { baseType = undefined; }\n        var _this = this;\n        if (Array.isArray(defaultValues)) {\n            defaultValues.forEach(function (d) { return applyDefaultValues(_this, d); });\n        }\n        else if (defaultValues) {\n            applyDefaultValues(this, defaultValues);\n        }\n        if (Array.isArray(initialSetters)) {\n            initialSetters.forEach(function (name) { return setAssignMethod(_this, name); });\n        }\n        if (baseType) {\n            this.__fluent$base__ = baseType;\n        }\n    }\n    /**\n     * Returns a FluentAssignFactory<FluentAssign<T>> ready to define a FluentAssign type.\n     * @param defaultValues An object representing default values for the instance.\n     * @param initialSetters A list of initial setters for the instance.\n     * @returns {FluentAssignFactory<T>}\n     */\n    FluentAssign.compose = function (defaultValues, initialSetters) {\n        if (defaultValues === void 0) { defaultValues = undefined; }\n        if (initialSetters === void 0) { initialSetters = undefined; }\n        return FluentAssign.composeWith(new FluentAssign(defaultValues, initialSetters));\n    };\n    /**\n     * Returns a FluentAssignFactory<Z> where Z is an instance of FluentAssign<?> or a derived\n     * class of it.\n     * @param fluentAssign An instance of FluentAssign<?> or a derived class of FluentAssign<?>.\n     * @returns {any}\n     */\n    FluentAssign.composeWith = function (fluentAssign) {\n        return new FluentAssignFactory(fluentAssign);\n    };\n    FluentAssign.prototype.toJSON = function () {\n        var _this = this;\n        return getAssignedPropertyNames(this)\n            .reduce(function (obj, name) {\n            var key = privateKey(name);\n            // re-define property descriptors (we dont want their value)\n            var propDesc = Object.getOwnPropertyDescriptor(_this, key);\n            if (propDesc) {\n                Object.defineProperty(obj, name, propDesc);\n            }\n            else {\n                obj[name] = _this[key];\n            }\n            return obj;\n        }, this.__fluent$base__ ? new this.__fluent$base__() : {});\n    };\n    return FluentAssign;\n}());\nexport { FluentAssign };\n//# sourceMappingURL=fluent-assign.js.map","/home/travis/build/npmtest/node-npmtest-angular2-modal/node_modules/angular2-modal/esm/framework/utils.js":"/**\n * Simple object extend\n * @param m1\n * @param m2\n * @returns {{}}\n */\n/**\n * Simple object extend\n * @param m1\n * @param m2\n * @returns {{}}\n */ export function extend(m1, m2) {\n    var m = {};\n    for (var attr in m1) {\n        if (m1.hasOwnProperty(attr)) {\n            m[attr] = m1[attr];\n        }\n    }\n    for (var attr in m2) {\n        if (m2.hasOwnProperty(attr)) {\n            m[attr] = m2[attr];\n        }\n    }\n    return m;\n}\n/**\n * Simple, not optimized, array union of unique values.\n * @param arr1\n * @param arr2\n * @returns {T[]|any[]|any[][]|any[]}\n */\nexport function arrayUnion(arr1, arr2) {\n    return arr1\n        .concat(arr2.filter(function (v) { return arr1.indexOf(v) === -1; }));\n}\n/**\n * Returns true if the config supports a given key.\n * @param key\n * @returns {boolean}\n */\nexport function supportsKey(keyCode, config) {\n    if (!Array.isArray(config))\n        return config === null ? false : true;\n    return config.indexOf(keyCode) > -1;\n}\n/**\n * Given an object representing a key/value map of css properties, returns a valid css string\n * representing the object.\n * Example:\n * console.log(toStyleString({\n *     position: 'absolute',\n *     width: '100%',\n *     height: '100%',\n *     top: '0',\n *     left: '0',\n *     right: '0',\n *     bottom: '0'\n * }));\n * // position:absolute;width:100%;height:100%;top:0;left:0;right:0;bottom:0\n * @param obj\n * @returns {string}\n */\nexport function toStyleString(obj) {\n    return Object.getOwnPropertyNames(obj)\n        .map(function (k) { return k + \":\" + obj[k]; })\n        .join(';');\n    // let objStr = JSON.stringify(obj);\n    // return objStr.substr(1, objStr.length - 2)\n    //     .replace(/,/g, ';')\n    //     .replace(/\"/g, '');\n}\nvar PromiseCompleter = (function () {\n    function PromiseCompleter() {\n        var _this = this;\n        this.promise = new Promise(function (res, rej) {\n            _this.resolve = res;\n            _this.reject = rej;\n        });\n    }\n    return PromiseCompleter;\n}());\nexport { PromiseCompleter };\nexport function noop() { }\n//# sourceMappingURL=utils.js.map","/home/travis/build/npmtest/node-npmtest-angular2-modal/node_modules/angular2-modal/esm/models/dialog-ref.js":"import { Subject } from 'rxjs/Subject';\nimport { PromiseCompleter } from '../framework/utils';\nimport { DialogBailOutError } from '../models/errors';\n/**\n * API to an open modal window.\n */\nvar DialogRef = (function () {\n    function DialogRef(overlay, context) {\n        this.overlay = overlay;\n        this.context = context;\n        this._resultDeferred = new PromiseCompleter();\n        this._onDestroy = new Subject();\n        this.onDestroy = this._onDestroy.asObservable();\n    }\n    Object.defineProperty(DialogRef.prototype, \"result\", {\n        /**\n         * A Promise that is resolved on a close event and rejected on a dismiss event.\n         * @returns {Promise<T>|any|*|Promise<any>}\n         */\n        get: function () {\n            return this._resultDeferred.promise;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Set a close/dismiss guard\n     * @param g\n     */\n    DialogRef.prototype.setCloseGuard = function (guard) {\n        this.closeGuard = guard;\n    };\n    /**\n     *  Close the modal with a return value, i.e: result.\n     */\n    DialogRef.prototype.close = function (result) {\n        var _this = this;\n        if (result === void 0) { result = null; }\n        var _close = function () {\n            _this.destroy();\n            _this._resultDeferred.resolve(result);\n        };\n        this._fireHook('beforeClose')\n            .then(function (value) { return value !== true && _close(); })\n            .catch(_close);\n    };\n    /**\n     *  Close the modal without a return value, i.e: cancelled.\n     *  This call is automatically invoked when a user either:\n     *  - Presses an exit keyboard key (if configured).\n     *  - Clicks outside of the modal window (if configured).\n     *  Usually, dismiss represent a Cancel button or a X button.\n     */\n    DialogRef.prototype.dismiss = function () {\n        var _this = this;\n        var _dismiss = function () {\n            _this.destroy();\n            _this._resultDeferred.promise.catch(function () { });\n            _this._resultDeferred.reject();\n        };\n        this._fireHook('beforeDismiss')\n            .then(function (value) { return value !== true && _dismiss(); })\n            .catch(_dismiss);\n    };\n    /**\n     * Gracefully close the overlay/dialog with a rejected result.\n     * Does not trigger canDestroy on the overlay.\n     */\n    DialogRef.prototype.bailOut = function () {\n        if (this.destroyed !== true) {\n            this.destroyed = true;\n            this._onDestroy.next(null);\n            this._onDestroy.complete();\n            this._resultDeferred.reject(new DialogBailOutError());\n        }\n    };\n    DialogRef.prototype.destroy = function () {\n        var _this = this;\n        if (this.destroyed !== true) {\n            this.destroyed = true;\n            if (typeof this.overlayRef.instance.canDestroy === 'function') {\n                this.overlayRef.instance.canDestroy()\n                    .catch(function () { })\n                    .then(function () { return _this._destroy(); });\n            }\n            else {\n                this._destroy();\n            }\n        }\n    };\n    DialogRef.prototype._destroy = function () {\n        this._onDestroy.next(null);\n        this._onDestroy.complete();\n        this.overlayRef.destroy();\n    };\n    DialogRef.prototype._fireHook = function (name) {\n        var gurad = this.closeGuard, fn = gurad && typeof gurad[name] === 'function' && gurad[name];\n        return Promise.resolve(fn ? fn.call(gurad) : false);\n    };\n    return DialogRef;\n}());\nexport { DialogRef };\n//# sourceMappingURL=dialog-ref.js.map","/home/travis/build/npmtest/node-npmtest-angular2-modal/node_modules/angular2-modal/esm/models/dialog-ref-stack.js":"var BASKET_GROUP = {};\n/**\n * A dumb stack implementation over an array.\n */\nvar DialogRefStack = (function () {\n    function DialogRefStack() {\n        this._stack = [];\n        this._stackMap = new Map();\n    }\n    Object.defineProperty(DialogRefStack.prototype, \"length\", {\n        get: function () {\n            return this._stack.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DialogRefStack.prototype.push = function (dialogRef, group) {\n        if (this._stack.indexOf(dialogRef) === -1) {\n            this._stack.push(dialogRef);\n            this._stackMap.set(dialogRef, group || BASKET_GROUP);\n        }\n    };\n    /**\n     * Push a DialogRef into the stack and manage it so when it's done\n     * it will automatically kick itself out of the stack.\n     * @param dialogRef\n     */\n    DialogRefStack.prototype.pushManaged = function (dialogRef, group) {\n        var _this = this;\n        this.push(dialogRef, group);\n        dialogRef.onDestroy.subscribe(function () { return _this.remove(dialogRef); });\n    };\n    DialogRefStack.prototype.pop = function () {\n        var dialogRef = this._stack.pop();\n        this._stackMap.delete(dialogRef);\n        return dialogRef;\n    };\n    /**\n     * Remove a DialogRef from the stack.\n     * @param dialogRef\n     */\n    DialogRefStack.prototype.remove = function (dialogRef) {\n        var idx = this.indexOf(dialogRef);\n        if (idx > -1) {\n            this._stack.splice(idx, 1);\n            this._stackMap.delete(dialogRef);\n        }\n    };\n    DialogRefStack.prototype.index = function (index) {\n        return this._stack[index];\n    };\n    DialogRefStack.prototype.indexOf = function (dialogRef) {\n        return this._stack.indexOf(dialogRef);\n    };\n    DialogRefStack.prototype.groupOf = function (dialogRef) {\n        return this._stackMap.get(dialogRef);\n    };\n    DialogRefStack.prototype.groupBy = function (group) {\n        var arr = [];\n        if (group) {\n            this._stackMap.forEach(function (value, key) {\n                if (value === group) {\n                    arr.push(key);\n                }\n            });\n        }\n        return arr;\n    };\n    DialogRefStack.prototype.groupLength = function (group) {\n        var count = 0;\n        if (group) {\n            this._stackMap.forEach(function (value, key) {\n                if (value === group) {\n                    count++;\n                }\n            });\n        }\n        return count;\n    };\n    return DialogRefStack;\n}());\nexport { DialogRefStack };\n//# sourceMappingURL=dialog-ref-stack.js.map","/home/travis/build/npmtest/node-npmtest-angular2-modal/node_modules/angular2-modal/esm/models/errors.js":"var __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar DialogBailOutError = (function (_super) {\n    __extends(DialogBailOutError, _super);\n    function DialogBailOutError(value) {\n        var _this = _super.call(this) || this;\n        if (!value) {\n            value = 'Dialog was forced to close by an unknown source.';\n        }\n        _this.message = value;\n        return _this;\n    }\n    return DialogBailOutError;\n}(Error));\nexport { DialogBailOutError };\n//# sourceMappingURL=errors.js.map","/home/travis/build/npmtest/node-npmtest-angular2-modal/node_modules/angular2-modal/esm/models/modal-context.js":"var __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { extend, arrayUnion } from './../framework/utils';\nimport { OverlayContext, OverlayContextBuilder } from './overlay-context';\nexport var DEFAULT_VALUES = {};\nvar DEFAULT_SETTERS = [\n    'message'\n];\nvar ModalContext = (function (_super) {\n    __extends(ModalContext, _super);\n    function ModalContext() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return ModalContext;\n}(OverlayContext));\nexport { ModalContext };\n/**\n * A core context builder for a modal window instance, used to define the context upon\n * a modal choose it's behaviour.\n */\nvar ModalContextBuilder = (function (_super) {\n    __extends(ModalContextBuilder, _super);\n    function ModalContextBuilder(defaultValues, initialSetters, baseType) {\n        if (defaultValues === void 0) { defaultValues = undefined; }\n        if (initialSetters === void 0) { initialSetters = undefined; }\n        if (baseType === void 0) { baseType = undefined; }\n        return _super.call(this, extend(DEFAULT_VALUES, defaultValues || {}), arrayUnion(DEFAULT_SETTERS, initialSetters || []), baseType) || this;\n    }\n    return ModalContextBuilder;\n}(OverlayContextBuilder));\nexport { ModalContextBuilder };\n//# sourceMappingURL=modal-context.js.map","/home/travis/build/npmtest/node-npmtest-angular2-modal/node_modules/angular2-modal/esm/models/modal-open-context.js":"var __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Modal } from '../providers/index';\nimport { ModalContext, ModalContextBuilder } from './modal-context';\nimport { arrayUnion } from '../framework/utils';\nvar DEFAULT_SETTERS = [\n    'component'\n];\nvar ModalOpenContext = (function (_super) {\n    __extends(ModalOpenContext, _super);\n    function ModalOpenContext() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return ModalOpenContext;\n}(ModalContext));\nexport { ModalOpenContext };\n/**\n * A Modal Context that knows about the modal service, and so can open a modal window on demand.\n * Use the fluent API to configure the preset and then invoke the 'open' method to open a modal\n * based on the context.\n */\nvar ModalOpenContextBuilder = (function (_super) {\n    __extends(ModalOpenContextBuilder, _super);\n    function ModalOpenContextBuilder(defaultValues, initialSetters, baseType) {\n        if (defaultValues === void 0) { defaultValues = undefined; }\n        if (initialSetters === void 0) { initialSetters = undefined; }\n        if (baseType === void 0) { baseType = undefined; }\n        return _super.call(this, defaultValues || {}, arrayUnion(DEFAULT_SETTERS, initialSetters || []), baseType) || this;\n    }\n    /**\n     * Hook to alter config and return bindings.\n     * @param config\n     */\n    ModalOpenContextBuilder.prototype.$$beforeOpen = function (config) {\n        return [];\n    };\n    /**\n     * Open a modal window based on the configuration of this config instance.\n     * @param viewContainer If set opens the modal inside the supplied viewContainer\n     * @returns Promise<DialogRef>\n     */\n    ModalOpenContextBuilder.prototype.open = function (viewContainer) {\n        var context = this.toJSON();\n        if (!(context.modal instanceof Modal)) {\n            return Promise.reject(new Error('Configuration Error: modal service not set.'));\n        }\n        var overlayConfig = {\n            context: context,\n            viewContainer: viewContainer,\n            bindings: typeof this.$$beforeOpen === 'function' && this.$$beforeOpen(context)\n        };\n        return context.modal.open(context.component, overlayConfig);\n    };\n    return ModalOpenContextBuilder;\n}(ModalContextBuilder));\nexport { ModalOpenContextBuilder };\n//# sourceMappingURL=modal-open-context.js.map","/home/travis/build/npmtest/node-npmtest-angular2-modal/node_modules/angular2-modal/esm/models/overlay-context.js":"var __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { FluentAssign } from './../framework/fluent-assign';\nimport { extend, arrayUnion } from './../framework/utils';\nexport var DEFAULT_VALUES = {\n    inElement: false,\n    isBlocking: true,\n    keyboard: [27],\n    supportsKey: function supportsKey(keyCode) {\n        return this.keyboard.indexOf(keyCode) > -1;\n    }\n};\nvar DEFAULT_SETTERS = [\n    'inElement',\n    'isBlocking',\n    'keyboard'\n];\nvar OverlayContext = (function () {\n    function OverlayContext() {\n    }\n    OverlayContext.prototype.normalize = function () {\n        if (this.isBlocking !== false)\n            this.isBlocking = true;\n        if (this.keyboard === null) {\n            this.keyboard = [];\n        }\n        else if (typeof this.keyboard === 'number') {\n            this.keyboard = [this.keyboard];\n        }\n        else if (!Array.isArray(this.keyboard)) {\n            this.keyboard = DEFAULT_VALUES.keyboard;\n        }\n    };\n    return OverlayContext;\n}());\nexport { OverlayContext };\n/**\n * A core context builder for a modal window instance, used to define the context upon\n * a modal choose it's behaviour.\n */\nvar OverlayContextBuilder = (function (_super) {\n    __extends(OverlayContextBuilder, _super);\n    function OverlayContextBuilder(defaultValues, initialSetters, baseType) {\n        if (defaultValues === void 0) { defaultValues = undefined; }\n        if (initialSetters === void 0) { initialSetters = undefined; }\n        if (baseType === void 0) { baseType = undefined; }\n        return _super.call(this, extend(DEFAULT_VALUES, defaultValues || {}), arrayUnion(DEFAULT_SETTERS, initialSetters || []), baseType || OverlayContext // https://github.com/Microsoft/TypeScript/issues/7234\n        ) || this;\n    }\n    /**\n     * Returns an new OverlayConfig with a context property representing the data in this builder.\n     * @param base A base configuration that the result will extend\n     * @returns OverlayConfig\n     */\n    OverlayContextBuilder.prototype.toOverlayConfig = function (base) {\n        return extend(base || {}, {\n            context: this.toJSON()\n        });\n    };\n    return OverlayContextBuilder;\n}(FluentAssign));\nexport { OverlayContextBuilder };\n/**\n * A helper to create an `OverlayConfig` on the fly.\n * Since `OverlayConfig` requires context it means a builder is needed, this process had some boilerplate.\n * When a quick, on the fly overlay config is needed use this helper to avoid that boilerplate.\n *\n * A builder is used as an API to allow setting the context and providing some operations around the modal.\n * When a developers knows the context before hand we can skip this step, this is what this factory is for.\n *\n * @param context The context for the modal\n * @param baseContextType Optional. The type/class of the context. This is the class used to init a new instance of the context\n * @param baseConfig A base configuration that the result will extend\n * @returns {OverlayConfig}\n */\nexport function overlayConfigFactory(context, baseContextType, baseConfig) {\n    return new OverlayContextBuilder(context, undefined, baseContextType).toOverlayConfig(baseConfig);\n}\n//# sourceMappingURL=overlay-context.js.map","/home/travis/build/npmtest/node-npmtest-angular2-modal/node_modules/angular2-modal/esm/models/tokens.js":"export var DROP_IN_TYPE;\n(function (DROP_IN_TYPE) {\n    DROP_IN_TYPE[DROP_IN_TYPE[\"alert\"] = 0] = \"alert\";\n    DROP_IN_TYPE[DROP_IN_TYPE[\"prompt\"] = 1] = \"prompt\";\n    DROP_IN_TYPE[DROP_IN_TYPE[\"confirm\"] = 2] = \"confirm\";\n})(DROP_IN_TYPE || (DROP_IN_TYPE = {}));\nvar OverlayRenderer = (function () {\n    function OverlayRenderer() {\n    }\n    return OverlayRenderer;\n}());\nexport { OverlayRenderer };\n//# sourceMappingURL=tokens.js.map","/home/travis/build/npmtest/node-npmtest-angular2-modal/node_modules/angular2-modal/esm/models/vc-ref-store.js":"var vcRefCollection = {};\nfunction getVCRef(key) {\n    return vcRefCollection[key] ? vcRefCollection[key].slice() : [];\n}\nfunction setVCRef(key, vcRef) {\n    if (!vcRefCollection.hasOwnProperty(key)) {\n        vcRefCollection[key] = [];\n    }\n    vcRefCollection[key].push(vcRef);\n}\nfunction delVCRef(key, vcRef) {\n    if (!vcRef) {\n        vcRefCollection[key] = [];\n    }\n    else {\n        var coll = vcRefCollection[key] || [], idx = coll.indexOf(vcRef);\n        if (idx > -1) {\n            coll.splice(idx, 1);\n        }\n    }\n}\n/**\n * A Simple store that holds a reference to ViewContainerRef instances by a user defined key.\n * This, with the OverlayTarget directive makes it easy to block the overlay inside an element\n * without having to use the angular query boilerplate.\n * @type {{\n *  getVCRef: (function(string): ViewContainerRef),\n *  setVCRef: (function(string, ViewContainerRef): void),\n *  delVCRef: (function(string): void)\n *  }}\n */\nexport var vcRefStore = { getVCRef: getVCRef, setVCRef: setVCRef, delVCRef: delVCRef };\n//# sourceMappingURL=vc-ref-store.js.map","/home/travis/build/npmtest/node-npmtest-angular2-modal/node_modules/angular2-modal/esm/overlay/index.js":"export { OverlayTarget, OverlayDialogBoundary, DefaultOverlayTarget } from './overlay.directives';\nexport { ModalOverlay } from './overlay.component';\nexport { Overlay } from './overlay.service';\n//# sourceMappingURL=index.js.map","/home/travis/build/npmtest/node-npmtest-angular2-modal/node_modules/angular2-modal/esm/overlay/overlay.component.js":"var __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { Component, ElementRef, ViewChild, ViewContainerRef, ViewEncapsulation, Renderer, TemplateRef } from '@angular/core';\nimport { PromiseCompleter, supportsKey } from '../framework/utils';\nimport { DialogRef } from '../models/dialog-ref';\nimport { BaseDynamicComponent } from '../components/index';\n/**\n * Represents the modal overlay.\n */\nvar ModalOverlay = (function (_super) {\n    __extends(ModalOverlay, _super);\n    function ModalOverlay(dialogRef, vcr, el, renderer) {\n        var _this = _super.call(this, el, renderer) || this;\n        _this.dialogRef = dialogRef;\n        _this.vcr = vcr;\n        _this.activateAnimationListener();\n        return _this;\n    }\n    /**\n     * @internal\n     */\n    ModalOverlay.prototype.getProjectables = function (content, bindings) {\n        var nodes;\n        if (typeof content === 'string') {\n            nodes = [[this.renderer.createText(null, \"\" + content)]];\n        }\n        else if (content instanceof TemplateRef) {\n            nodes = [\n                this.dialogRef.overlay.defaultViewContainer\n                    .createEmbeddedView(content, { dialogRef: this.dialogRef }).rootNodes\n            ];\n        }\n        else {\n            nodes = [this.embedComponent({ component: content, bindings: bindings }).rootNodes];\n        }\n        return nodes;\n    };\n    ModalOverlay.prototype.embedComponent = function (config) {\n        return this.vcr.createEmbeddedView(this.template, {\n            $implicit: config\n        });\n    };\n    ModalOverlay.prototype.addComponent = function (type, bindings, projectableNodes) {\n        if (bindings === void 0) { bindings = []; }\n        if (projectableNodes === void 0) { projectableNodes = []; }\n        return _super.prototype._addComponent.call(this, {\n            component: type,\n            vcRef: this.innerVcr,\n            bindings: bindings,\n            projectableNodes: projectableNodes\n        });\n    };\n    ModalOverlay.prototype.fullscreen = function () {\n        var _this = this;\n        var style = {\n            position: 'fixed',\n            top: 0,\n            left: 0,\n            bottom: 0,\n            right: 0,\n            'z-index': 1500\n        };\n        Object.keys(style).forEach(function (k) { return _this.setStyle(k, style[k]); });\n    };\n    ModalOverlay.prototype.insideElement = function () {\n        var _this = this;\n        var style = {\n            position: 'absolute',\n            overflow: 'hidden',\n            width: '100%',\n            height: '100%',\n            top: 0,\n            left: 0,\n            bottom: 0,\n            right: 0\n        };\n        Object.keys(style).forEach(function (k) { return _this.setStyle(k, style[k]); });\n    };\n    /**\n     * Define an element that click inside it will not trigger modal close.\n     * Since events bubble, clicking on a dialog will bubble up to the overlay, a plugin\n     * must define an element that represent the dialog, the overlay will make sure no to close when\n     * it was clicked.\n     * @param element\n     */\n    ModalOverlay.prototype.setClickBoundary = function (element) {\n        var _this = this;\n        var target;\n        var elListener = function (event) { return target = event.target; };\n        var docListener = function (event) {\n            if (_this.dialogRef.context.isBlocking || !_this.dialogRef.overlay.isTopMost(_this.dialogRef)) {\n                return;\n            }\n            var current = event.target;\n            // on click, this will hit.\n            if (current === target)\n                return;\n            // on mouse down -> drag -> release the current might not be 'target', it might be\n            // a sibling or a child (i.e: not part of the tree-up direction). It might also be a release\n            // outside the dialog... so we compare to the boundary element\n            do {\n                if (current === element) {\n                    return;\n                }\n            } while (current.parentNode && (current = current.parentNode));\n            _this.dialogRef.dismiss();\n        };\n        this.dialogRef.onDestroy.subscribe(function () {\n            element.removeEventListener('click', elListener, false);\n            element.removeEventListener('touchstart', elListener, false);\n            document.removeEventListener('click', docListener, false);\n            document.removeEventListener('touchend', docListener, false);\n        });\n        setTimeout(function () {\n            element.addEventListener('mousedown', elListener, false);\n            element.addEventListener('touchstart', docListener, false);\n            document.addEventListener('click', docListener, false);\n            document.addEventListener('touchend', docListener, false);\n        });\n    };\n    /**\n     * Temp workaround for animation where destruction of the top level component does not\n     * trigger child animations. Solution should be found either in animation module or in design\n     * of the modal component tree.\n     * @returns {Promise<void>}\n     */\n    ModalOverlay.prototype.canDestroy = function () {\n        var completer = new PromiseCompleter();\n        if (!Array.isArray(this.beforeDestroyHandlers)) {\n            completer.resolve();\n        }\n        else {\n            // run destroy notification but protect against halt.\n            var id_1 = setTimeout(function () {\n                id_1 = null;\n                completer.reject();\n            }, 1000);\n            var resolve = function () {\n                if (id_1 === null)\n                    return;\n                clearTimeout(id_1);\n                completer.resolve();\n            };\n            Promise.all(this.beforeDestroyHandlers.map(function (fn) { return fn(); }))\n                .then(resolve)\n                .catch(resolve);\n        }\n        return completer.promise;\n    };\n    /**\n     * A handler running before destruction of the overlay\n     * use to delay destruction due to animation.\n     * This is part of the workaround for animation, see canDestroy.\n     *\n     * NOTE: There is no guarantee that the listeners will fire, use dialog.onDestory for that.\n     * @param fn\n     */\n    ModalOverlay.prototype.beforeDestroy = function (fn) {\n        if (!this.beforeDestroyHandlers) {\n            this.beforeDestroyHandlers = [];\n        }\n        this.beforeDestroyHandlers.push(fn);\n    };\n    ModalOverlay.prototype.documentKeypress = function (event) {\n        // check that this modal is the last in the stack.\n        if (!this.dialogRef.overlay.isTopMost(this.dialogRef))\n            return;\n        if (supportsKey(event.keyCode, this.dialogRef.context.keyboard)) {\n            this.dialogRef.dismiss();\n        }\n    };\n    ModalOverlay.prototype.ngOnDestroy = function () {\n        _super.prototype.ngOnDestroy.call(this);\n        if (this.dialogRef.destroyed !== true) {\n            // if we're here the overlay is destroyed by an external event that is not user invoked.\n            // i.e: The user did no call dismiss or close and dialogRef.destroy() did not invoke.\n            // this will happen when routing or killing an element containing a blocked overlay (ngIf)\n            // we bail out, i.e gracefully shutting down.\n            this.dialogRef.bailOut();\n        }\n    };\n    return ModalOverlay;\n}(BaseDynamicComponent));\n__decorate([\n    ViewChild('innerView', { read: ViewContainerRef }),\n    __metadata(\"design:type\", ViewContainerRef)\n], ModalOverlay.prototype, \"innerVcr\", void 0);\n__decorate([\n    ViewChild('template'),\n    __metadata(\"design:type\", TemplateRef)\n], ModalOverlay.prototype, \"template\", void 0);\nModalOverlay = __decorate([\n    Component({\n        selector: 'modal-overlay',\n        host: {\n            '(body:keydown)': 'documentKeypress($event)'\n        },\n        encapsulation: ViewEncapsulation.None,\n        template: \"<template #innerView></template>\\n<template #template let-ctx>\\n    <template [swapCmp]=\\\"ctx.component\\\" [swapCmpBindings]=\\\"ctx.bindings\\\" [swapCmpProjectables]=\\\"ctx.projectableNodes\\\"></template>\\n</template>\\n\"\n    }),\n    __metadata(\"design:paramtypes\", [DialogRef,\n        ViewContainerRef,\n        ElementRef,\n        Renderer])\n], ModalOverlay);\nexport { ModalOverlay };\n//# sourceMappingURL=overlay.component.js.map","/home/travis/build/npmtest/node-npmtest-angular2-modal/node_modules/angular2-modal/esm/overlay/overlay.directives.js":"var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { Directive, Input, ElementRef, ViewContainerRef } from '@angular/core';\nimport { DialogRef } from '../models/dialog-ref';\nimport { vcRefStore } from '../models/vc-ref-store';\nimport { Overlay } from \"./overlay.service\";\n/**\n * A directive use to signal the overlay that the host of this directive\n * is a dialog boundary, i.e: over click outside of the element should close the modal\n * (if non blocking)\n */\nvar OverlayDialogBoundary = (function () {\n    function OverlayDialogBoundary(el, dialogRef) {\n        if (dialogRef && el.nativeElement) {\n            dialogRef.overlayRef.instance.setClickBoundary(el.nativeElement);\n        }\n    }\n    return OverlayDialogBoundary;\n}());\nOverlayDialogBoundary = __decorate([\n    Directive({\n        selector: '[overlayDialogBoundary]'\n    }),\n    __metadata(\"design:paramtypes\", [ElementRef, DialogRef])\n], OverlayDialogBoundary);\nexport { OverlayDialogBoundary };\nvar OverlayTarget = (function () {\n    function OverlayTarget(vcRef) {\n        this.vcRef = vcRef;\n    }\n    Object.defineProperty(OverlayTarget.prototype, \"targetKey\", {\n        set: function (value) {\n            this._targetKey = value;\n            if (value) {\n                vcRefStore.setVCRef(value, this.vcRef);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    OverlayTarget.prototype.ngOnDestroy = function () {\n        if (this._targetKey) {\n            vcRefStore.delVCRef(this._targetKey, this.vcRef);\n        }\n    };\n    return OverlayTarget;\n}());\n__decorate([\n    Input('overlayTarget'),\n    __metadata(\"design:type\", String),\n    __metadata(\"design:paramtypes\", [String])\n], OverlayTarget.prototype, \"targetKey\", null);\nOverlayTarget = __decorate([\n    Directive({\n        selector: '[overlayTarget]'\n    }),\n    __metadata(\"design:paramtypes\", [ViewContainerRef])\n], OverlayTarget);\nexport { OverlayTarget };\nvar noop = function () { };\nvar DefaultOverlayTarget = (function () {\n    function DefaultOverlayTarget(overlay, vcRef) {\n        this.overlay = overlay;\n        overlay.defaultViewContainer = vcRef;\n    }\n    DefaultOverlayTarget.prototype.ngOnDestroy = function () {\n        this.overlay.defaultViewContainer = undefined;\n    };\n    return DefaultOverlayTarget;\n}());\nDefaultOverlayTarget = __decorate([\n    Directive({\n        selector: '[defaultOverlayTarget]'\n    }),\n    __metadata(\"design:paramtypes\", [Overlay, ViewContainerRef])\n], DefaultOverlayTarget);\nexport { DefaultOverlayTarget };\n//# sourceMappingURL=overlay.directives.js.map","/home/travis/build/npmtest/node-npmtest-angular2-modal/node_modules/angular2-modal/esm/overlay/overlay.service.js":"var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { Injectable } from '@angular/core';\nimport { OverlayRenderer } from '../models/tokens';\nimport { DialogRefStack } from '../models/dialog-ref-stack';\nimport { vcRefStore } from '../models/vc-ref-store';\nimport { DialogRef } from '../models/dialog-ref';\nvar _stack = new DialogRefStack();\nvar Overlay = (function () {\n    function Overlay(_modalRenderer) {\n        this._modalRenderer = _modalRenderer;\n    }\n    Object.defineProperty(Overlay.prototype, \"stackLength\", {\n        get: function () {\n            return _stack.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Check if a given DialogRef is the top most ref in the stack.\n     * TODO: distinguish between body modal vs in element modal.\n     * @param dialogRef\n     * @returns {boolean}\n     */\n    Overlay.prototype.isTopMost = function (dialogRef) {\n        return _stack.indexOf(dialogRef) === _stack.length - 1;\n    };\n    Overlay.prototype.stackPosition = function (dialogRef) {\n        return _stack.indexOf(dialogRef);\n    };\n    Overlay.prototype.groupStackLength = function (dialogRef) {\n        return _stack.groupLength(_stack.groupOf(dialogRef));\n    };\n    /**\n     * Creates an overlay and returns a dialog ref.\n     * @param config instructions how to create the overlay\n     * @param group A token to associate the new overlay with, used for reference (stacks usually)\n     * @returns {DialogRef<T>[]}\n     */\n    Overlay.prototype.open = function (config, group) {\n        var _this = this;\n        var viewContainer = config.viewContainer, containers = [];\n        if (typeof viewContainer === 'string') {\n            containers = vcRefStore.getVCRef(viewContainer);\n        }\n        else if (Array.isArray(viewContainer)) {\n            containers = viewContainer;\n        }\n        else if (viewContainer) {\n            containers = [viewContainer];\n        }\n        if (!containers || !containers[0]) {\n            if (!this.defaultViewContainer) {\n                throw new Error('Default view container not set. Add the \"defaultOverlayTarget\" directive ' +\n                    'to the application root component template (e.g: <span defaultOverlayTarget></span>. ' +\n                    'You can also set it manually using the \"Overlay\" service \"defaultViewContainer\" property.');\n            }\n            containers = [this.defaultViewContainer];\n        }\n        return containers\n            .map(function (vc) { return _this.createOverlay(config.renderer || _this._modalRenderer, vc, config, group); });\n    };\n    Overlay.prototype.createOverlay = function (renderer, vcRef, config, group) {\n        if (config.context) {\n            config.context.normalize();\n        }\n        var dialog = new DialogRef(this, config.context || {});\n        dialog.inElement = config.context && !!config.context.inElement;\n        var cmpRef = renderer.render(dialog, vcRef, config.injector);\n        Object.defineProperty(dialog, 'overlayRef', { value: cmpRef });\n        _stack.pushManaged(dialog, group);\n        return dialog;\n    };\n    return Overlay;\n}());\nOverlay = __decorate([\n    Injectable(),\n    __metadata(\"design:paramtypes\", [OverlayRenderer])\n], Overlay);\nexport { Overlay };\n//# sourceMappingURL=overlay.service.js.map","/home/travis/build/npmtest/node-npmtest-angular2-modal/node_modules/angular2-modal/esm/providers/dom-modal-renderer.js":"var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Injectable, ReflectiveInjector } from '@angular/core';\nimport { createComponent } from '../framework/createComponent';\nimport { DialogRef } from '../models/dialog-ref';\nimport { ModalOverlay } from '../overlay/index';\nvar DOMOverlayRenderer = (function () {\n    function DOMOverlayRenderer() {\n    }\n    DOMOverlayRenderer.prototype.render = function (dialog, vcRef, injector) {\n        var bindings = ReflectiveInjector.resolve([\n            { provide: DialogRef, useValue: dialog }\n        ]);\n        var cmpRef = createComponent({\n            component: ModalOverlay,\n            vcRef: vcRef,\n            injector: injector,\n            bindings: bindings\n        });\n        if (dialog.inElement) {\n            vcRef.element.nativeElement.appendChild(cmpRef.location.nativeElement);\n        }\n        else {\n            document.body.appendChild(cmpRef.location.nativeElement);\n        }\n        return cmpRef;\n    };\n    return DOMOverlayRenderer;\n}());\nDOMOverlayRenderer = __decorate([\n    Injectable()\n], DOMOverlayRenderer);\nexport { DOMOverlayRenderer };\n//# sourceMappingURL=dom-modal-renderer.js.map","/home/travis/build/npmtest/node-npmtest-angular2-modal/node_modules/angular2-modal/esm/providers/index.js":"export { DOMOverlayRenderer } from './dom-modal-renderer';\nexport { Modal } from './modal';\nexport { DOMOutsideEventPlugin } from './outside-event-plugin';\n//# sourceMappingURL=index.js.map","/home/travis/build/npmtest/node-npmtest-angular2-modal/node_modules/angular2-modal/esm/providers/modal.js":"var __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { ReflectiveInjector } from '@angular/core';\nimport { DialogRef } from '../models/dialog-ref';\nvar UnsupportedDropInError = (function (_super) {\n    __extends(UnsupportedDropInError, _super);\n    function UnsupportedDropInError(dropInName) {\n        var _this = _super.call(this) || this;\n        _this.message = \"Unsupported Drop-In \" + dropInName;\n        return _this;\n    }\n    return UnsupportedDropInError;\n}(Error));\nexport { UnsupportedDropInError };\nvar Modal = (function () {\n    function Modal(overlay) {\n        this.overlay = overlay;\n    }\n    Modal.prototype.alert = function () {\n        throw new UnsupportedDropInError('alert');\n    };\n    Modal.prototype.prompt = function () {\n        throw new UnsupportedDropInError('prompt');\n    };\n    Modal.prototype.confirm = function () {\n        throw new UnsupportedDropInError('confirm');\n    };\n    /**\n     * Opens a modal window inside an existing component.\n     * @param content The content to display, either string, template ref or a component.\n     * @param config Additional settings.\n     * @returns {Promise<DialogRef>}\n     */\n    Modal.prototype.open = function (content, config) {\n        config = config || {};\n        try {\n            var dialogs = this.overlay.open(config, this.constructor);\n            if (dialogs.length > 1) {\n                console.warn(\"Attempt to open more then 1 overlay detected.\\n        Multiple modal copies are not supported at the moment, \\n        only the first viewContainer will display.\");\n            }\n            // TODO:  Currently supporting 1 view container, hence working on dialogs[0].\n            //        upgrade to multiple containers.\n            return Promise.resolve(this.create(dialogs[0], content, config.bindings));\n        }\n        catch (e) {\n            return Promise.reject(e);\n        }\n    };\n    Modal.prototype.createBackdrop = function (dialogRef, BackdropComponent) {\n        var b = ReflectiveInjector.resolve([{ provide: DialogRef, useValue: dialogRef }]);\n        return dialogRef.overlayRef.instance.addComponent(BackdropComponent, b);\n    };\n    Modal.prototype.createContainer = function (dialogRef, ContainerComponent, content, bindings) {\n        var b = ReflectiveInjector.resolve([{ provide: DialogRef, useValue: dialogRef }])\n            .concat(bindings || []);\n        var nodes = dialogRef.overlayRef.instance.getProjectables(content, b);\n        return dialogRef.overlayRef.instance.addComponent(ContainerComponent, b, nodes);\n    };\n    /**\n     * A helper function for derived classes to create backdrop & container\n     * @param dialogRef\n     * @param backdrop\n     * @param container\n     * @returns { backdropRef: ComponentRef<B>, containerRef: ComponentRef<C> }\n     *\n     * @deprecated use createBackdrop and createContainer instead\n     */\n    Modal.prototype.createModal = function (dialogRef, backdrop, container) {\n        var b = ReflectiveInjector.resolve([{ provide: DialogRef, useValue: dialogRef }]);\n        return {\n            backdropRef: dialogRef.overlayRef.instance.addComponent(backdrop, b),\n            containerRef: dialogRef.overlayRef.instance.addComponent(container, b)\n        };\n    };\n    return Modal;\n}());\nexport { Modal };\n//# sourceMappingURL=modal.js.map","/home/travis/build/npmtest/node-npmtest-angular2-modal/node_modules/angular2-modal/esm/providers/outside-event-plugin.js":"// heavily inspired by:\n// http://www.bennadel.com/blog/3025-creating-custom-dom-and-host-event-bindings-in-angular-2-beta-6.htm\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { Injectable } from '@angular/core';\nimport { noop } from '../framework/utils';\nvar eventMap = {\n    clickOutside: 'click',\n    mousedownOutside: 'mousedown',\n    mouseupOutside: 'mouseup',\n    mousemoveOutside: 'mousemove'\n};\n/**\n * An event handler factory for event handlers that bubble the event to a given handler\n * if the event target is not an ancestor of the given element.\n * @param element\n * @param handler\n * @returns {function(any): undefined}\n */\nfunction bubbleNonAncestorHandlerFactory(element, handler) {\n    return function (event) {\n        var current = event.target;\n        do {\n            if (current === element) {\n                return;\n            }\n        } while (current.parentNode && (current = current.parentNode));\n        handler(event);\n    };\n}\nvar DOMOutsideEventPlugin = (function () {\n    function DOMOutsideEventPlugin() {\n        // TODO: use DI factory for this.\n        if (!document || typeof document.addEventListener !== 'function') {\n            this.addEventListener = noop;\n        }\n    }\n    DOMOutsideEventPlugin.prototype.supports = function (eventName) {\n        return eventMap.hasOwnProperty(eventName);\n    };\n    DOMOutsideEventPlugin.prototype.addEventListener = function (element, eventName, handler) {\n        var zone = this.manager.getZone();\n        // A Factory that registers the event on the document, instead of the element.\n        // the handler is created at runtime, and it acts as a propagation/bubble predicate, it will\n        // bubble up the event (i.e: execute our original event handler) only if the event targer\n        // is an ancestor of our element.\n        // The event is fired inside the angular zone so change detection can kick into action.\n        var onceOnOutside = function () {\n            var listener = bubbleNonAncestorHandlerFactory(element, function (evt) { return zone.runGuarded(function () { return handler(evt); }); });\n            // mimic BrowserDomAdapter.onAndCancel\n            document.addEventListener(eventMap[eventName], listener, false);\n            return function () { return document.removeEventListener(eventMap[eventName], listener, false); };\n        };\n        // we run the event registration for the document in a different zone, this will make sure\n        // change detection is off.\n        // It turns out that if a component that use DOMOutsideEventPlugin is built from a click\n        // event, we might get here before the event reached the document, causing a quick false\n        // positive handling (when stopPropagation() was'nt invoked). To workaround this we wait\n        // for the next vm turn and register.\n        // Event registration returns a dispose function for that event, angular use it to clean\n        // up after component get's destroyed. Since we need to return a dispose function\n        // synchronously we have to put a wrapper for it since we will get it asynchronously,\n        // i.e: after we need to return it.\n        //\n        return zone.runOutsideAngular(function () {\n            var fn;\n            setTimeout(function () { return fn = onceOnOutside(); }, 0);\n            return function () { return fn(); };\n        });\n    };\n    DOMOutsideEventPlugin.prototype.addGlobalEventListener = function (target, eventName, handler) {\n        throw 'not supported';\n    };\n    return DOMOutsideEventPlugin;\n}());\nDOMOutsideEventPlugin = __decorate([\n    Injectable(),\n    __metadata(\"design:paramtypes\", [])\n], DOMOutsideEventPlugin);\nexport { DOMOutsideEventPlugin };\n//# sourceMappingURL=outside-event-plugin.js.map","/home/travis/build/npmtest/node-npmtest-angular2-modal/node_modules/angular2-modal/plugins/bootstrap/bootstrap.module.js":"var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ModalModule, Modal as BaseModal } from 'angular2-modal';\nimport { Modal } from './modal';\nimport { BSModalContainer } from './modal-container.component';\nimport { BSMessageModal, BSMessageModalTitle, BSMessageModalBody, BSModalFooter } from './message-modal.component';\nexport var providers = [\n    { provide: BaseModal, useClass: Modal },\n    { provide: Modal, useClass: Modal }\n];\nvar BootstrapModalModule = (function () {\n    function BootstrapModalModule() {\n    }\n    BootstrapModalModule.getProviders = function () {\n        return providers;\n    };\n    return BootstrapModalModule;\n}());\nBootstrapModalModule = __decorate([\n    NgModule({\n        imports: [ModalModule, CommonModule],\n        declarations: [\n            BSModalFooter,\n            BSMessageModalTitle,\n            BSMessageModalBody,\n            BSMessageModal,\n            BSModalContainer\n        ],\n        providers: providers,\n        entryComponents: [\n            BSModalContainer,\n            BSMessageModal\n        ]\n    })\n], BootstrapModalModule);\nexport { BootstrapModalModule };\n//# sourceMappingURL=bootstrap.module.js.map","/home/travis/build/npmtest/node-npmtest-angular2-modal/node_modules/angular2-modal/plugins/bootstrap/index.js":"export { BSModalContext, BSModalContextBuilder } from './modal-context';\nexport { BSModalContainer } from './modal-container.component';\nexport { BSMessageModal, BSMessageModalTitle, BSMessageModalBody, BSModalFooter } from './message-modal.component';\nexport { MessageModalPresetBuilder } from './presets/message-modal-preset';\nexport { ModalOpenContext, ModalOpenContextBuilder } from 'angular2-modal';\nexport { OneButtonPresetBuilder } from './presets/one-button-preset';\nexport { TwoButtonPresetBuilder, PromptPresetBuilder } from './presets/two-button-preset';\nexport { Modal } from './modal';\nexport { BootstrapModalModule, providers } from './bootstrap.module';\n//# sourceMappingURL=index.js.map","/home/travis/build/npmtest/node-npmtest-angular2-modal/node_modules/angular2-modal/plugins/bootstrap/message-modal.component.js":"var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { Component, ViewEncapsulation } from '@angular/core';\nimport { DialogRef } from 'angular2-modal';\nvar BSMessageModalTitle = (function () {\n    function BSMessageModalTitle(dialog) {\n        this.dialog = dialog;\n        this.context = dialog.context;\n    }\n    Object.defineProperty(BSMessageModalTitle.prototype, \"titleHtml\", {\n        get: function () {\n            return this.context.titleHtml ? 1 : 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return BSMessageModalTitle;\n}());\nBSMessageModalTitle = __decorate([\n    Component({\n        selector: 'modal-title',\n        encapsulation: ViewEncapsulation.None,\n        template: \"<div [ngClass]=\\\"context.headerClass\\\" [ngSwitch]=\\\"titleHtml\\\">\\n      <button *ngIf=\\\"context.showClose\\\" type=\\\"button\\\" class=\\\"close\\\" \\n              aria-label=\\\"Close\\\" (click)=\\\"dialog.dismiss()\\\">\\n          <span aria-hidden=\\\"true\\\">\\u00D7</span>\\n      </button>\\n      <div *ngSwitchCase=\\\"1\\\" [innerHtml]=\\\"context.titleHtml\\\"></div>\\n      <h3 *ngSwitchDefault class=\\\"modal-title\\\">{{context.title}}</h3>\\n </div>\"\n    }),\n    __metadata(\"design:paramtypes\", [DialogRef])\n], BSMessageModalTitle);\nexport { BSMessageModalTitle };\nvar BSMessageModalBody = (function () {\n    function BSMessageModalBody(dialog) {\n        this.dialog = dialog;\n        this.context = dialog.context;\n    }\n    return BSMessageModalBody;\n}());\nBSMessageModalBody = __decorate([\n    Component({\n        selector: 'modal-body',\n        encapsulation: ViewEncapsulation.None,\n        styles: [\".form-group {\\n    margin-top: 10px;\\n  }\"],\n        template: \"<div [ngClass]=\\\"context.bodyClass\\\"> \\n    <div [innerHtml]=\\\"context.message\\\"></div>\\n      <div *ngIf=\\\"context.showInput\\\" class=\\\"form-group\\\">\\n        <input autofocus #input\\n            name=\\\"bootstrap\\\" \\n            type=\\\"text\\\" \\n            class=\\\"form-control\\\"\\n            [value]=\\\"context.defaultValue\\\"\\n            (change)=\\\"context.defaultValue = input.value\\\"  \\n            placeholder=\\\"{{context.placeholder}}\\\">\\n      </div>\\n    </div>\\n\"\n    }),\n    __metadata(\"design:paramtypes\", [DialogRef])\n], BSMessageModalBody);\nexport { BSMessageModalBody };\n/**\n * Represents the modal footer for storing buttons.\n */\nvar BSModalFooter = (function () {\n    function BSModalFooter(dialog) {\n        this.dialog = dialog;\n    }\n    BSModalFooter.prototype.onClick = function (btn, $event) {\n        $event.stopPropagation();\n        btn.onClick(this, $event);\n    };\n    return BSModalFooter;\n}());\nBSModalFooter = __decorate([\n    Component({\n        selector: 'modal-footer',\n        encapsulation: ViewEncapsulation.None,\n        template: \"<div [ngClass]=\\\"dialog.context.footerClass\\\">\\n    <button *ngFor=\\\"let btn of dialog.context.buttons;\\\"\\n            [ngClass]=\\\"btn.cssClass\\\"\\n            (click)=\\\"onClick(btn, $event)\\\">{{btn.caption}}</button>\\n</div>\"\n    }),\n    __metadata(\"design:paramtypes\", [DialogRef])\n], BSModalFooter);\nexport { BSModalFooter };\n/**\n * A Component representing a generic bootstrap modal content element.\n *\n * By configuring a MessageModalContext instance you can:\n *\n *  Header:\n *      - Set header container class (default: modal-header)\n *      - Set title text (enclosed in H3 element)\n *      - Set title html (overrides text)\n *\n *  Body:\n *      - Set body container class.  (default: modal-body)\n *      - Set body container HTML.\n *\n *  Footer:\n *      - Set footer class.  (default: modal-footer)\n *      - Set button configuration (from 0 to n)\n */\nvar BSMessageModal = (function () {\n    function BSMessageModal(dialog) {\n        this.dialog = dialog;\n    }\n    return BSMessageModal;\n}());\nBSMessageModal = __decorate([\n    Component({\n        selector: 'modal-content',\n        encapsulation: ViewEncapsulation.None,\n        template: \"<modal-title></modal-title><modal-body></modal-body><modal-footer></modal-footer>\"\n    }),\n    __metadata(\"design:paramtypes\", [DialogRef])\n], BSMessageModal);\nexport { BSMessageModal };\n//# sourceMappingURL=message-modal.component.js.map","/home/travis/build/npmtest/node-npmtest-angular2-modal/node_modules/angular2-modal/plugins/bootstrap/modal-container.component.js":"var __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { Component, ElementRef, ViewEncapsulation, Renderer } from '@angular/core';\nimport { BaseDynamicComponent, DialogRef } from 'angular2-modal';\nvar BSModalContainer = (function (_super) {\n    __extends(BSModalContainer, _super);\n    function BSModalContainer(dialog, el, renderer) {\n        var _this = _super.call(this, el, renderer) || this;\n        _this.dialog = dialog;\n        _this.activateAnimationListener();\n        return _this;\n    }\n    return BSModalContainer;\n}(BaseDynamicComponent));\nBSModalContainer = __decorate([\n    Component({\n        selector: 'bs-modal-container',\n        host: {\n            'tabindex': '-1',\n            'role': 'dialog',\n            'class': 'modal fade',\n            'style': 'position: absolute; display: block'\n        },\n        encapsulation: ViewEncapsulation.None,\n        template: \"<div [ngClass]=\\\"dialog.context.dialogClass\\\" \\n      [class.modal-lg]=\\\"dialog.context.size == 'lg'\\\"\\n      [class.modal-sm]=\\\"dialog.context.size == 'sm'\\\">\\n  <div class=\\\"modal-content\\\" style=\\\"display:block\\\" role=\\\"document\\\" overlayDialogBoundary>\\n    <ng-content></ng-content>\\n  </div>    \\n</div>\"\n    }),\n    __metadata(\"design:paramtypes\", [DialogRef,\n        ElementRef, Renderer])\n], BSModalContainer);\nexport { BSModalContainer };\n//# sourceMappingURL=modal-container.component.js.map","/home/travis/build/npmtest/node-npmtest-angular2-modal/node_modules/angular2-modal/plugins/bootstrap/modal-container.js":"//# sourceMappingURL=modal-container.js.map","/home/travis/build/npmtest/node-npmtest-angular2-modal/node_modules/angular2-modal/plugins/bootstrap/modal-context.js":"var __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { ModalOpenContext, ModalOpenContextBuilder, extend, arrayUnion } from 'angular2-modal';\nvar DEFAULT_VALUES = {\n    dialogClass: 'modal-dialog',\n    showClose: false\n};\nvar DEFAULT_SETTERS = [\n    'dialogClass',\n    'size',\n    'showClose'\n];\nvar BSModalContext = (function (_super) {\n    __extends(BSModalContext, _super);\n    function BSModalContext() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    BSModalContext.prototype.normalize = function () {\n        if (!this.dialogClass) {\n            this.dialogClass = DEFAULT_VALUES.dialogClass;\n        }\n        _super.prototype.normalize.call(this);\n    };\n    return BSModalContext;\n}(ModalOpenContext));\nexport { BSModalContext };\nvar BSModalContextBuilder = (function (_super) {\n    __extends(BSModalContextBuilder, _super);\n    function BSModalContextBuilder(defaultValues, initialSetters, baseType) {\n        if (defaultValues === void 0) { defaultValues = undefined; }\n        if (initialSetters === void 0) { initialSetters = undefined; }\n        if (baseType === void 0) { baseType = undefined; }\n        return _super.call(this, extend(DEFAULT_VALUES, defaultValues || {}), arrayUnion(DEFAULT_SETTERS, initialSetters || []), baseType || BSModalContext // https://github.com/Microsoft/TypeScript/issues/7234\n        ) || this;\n    }\n    return BSModalContextBuilder;\n}(ModalOpenContextBuilder));\nexport { BSModalContextBuilder };\n//# sourceMappingURL=modal-context.js.map","/home/travis/build/npmtest/node-npmtest-angular2-modal/node_modules/angular2-modal/plugins/bootstrap/modal.js":"var __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport 'rxjs/add/operator/combineLatest';\nimport { Injectable } from '@angular/core';\nimport { Overlay, Modal as Modal_, CSSBackdrop, PromiseCompleter } from 'angular2-modal';\nimport { BSModalContainer } from './modal-container.component';\nimport { OneButtonPresetBuilder } from './../bootstrap/presets/one-button-preset';\nimport { TwoButtonPresetBuilder, PromptPresetBuilder } from './../bootstrap/presets/two-button-preset';\nvar Modal = (function (_super) {\n    __extends(Modal, _super);\n    function Modal(overlay) {\n        return _super.call(this, overlay) || this;\n    }\n    Modal.prototype.alert = function () {\n        return new OneButtonPresetBuilder(this, { isBlocking: false });\n    };\n    Modal.prototype.prompt = function () {\n        return new PromptPresetBuilder(this, { isBlocking: true, keyboard: null });\n    };\n    Modal.prototype.confirm = function () {\n        return new TwoButtonPresetBuilder(this, { isBlocking: true, keyboard: null });\n    };\n    Modal.prototype.create = function (dialogRef, content, bindings) {\n        var _this = this;\n        var backdropRef = this.createBackdrop(dialogRef, CSSBackdrop);\n        var containerRef = this.createContainer(dialogRef, BSModalContainer, content, bindings);\n        var overlay = dialogRef.overlayRef.instance;\n        var backdrop = backdropRef.instance;\n        var container = containerRef.instance;\n        dialogRef.inElement ? overlay.insideElement() : overlay.fullscreen();\n        // add body class if this is the only dialog in the stack\n        if (!document.body.classList.contains('modal-open')) {\n            document.body.classList.add('modal-open');\n        }\n        if (dialogRef.inElement) {\n            backdrop.setStyle('position', 'absolute');\n        }\n        backdrop.addClass('modal-backdrop fade', true);\n        backdrop.addClass('in');\n        container.addClass('in');\n        if (containerRef.location.nativeElement) {\n            containerRef.location.nativeElement.focus();\n        }\n        overlay.beforeDestroy(function () {\n            var completer = new PromiseCompleter();\n            backdrop.removeClass('in');\n            container.removeClass('in');\n            backdrop.myAnimationEnd$()\n                .combineLatest(container.myAnimationEnd$(), function (s1, s2) { return [s1, s2]; })\n                .subscribe(function (sources) {\n                _this.overlay.groupStackLength(dialogRef) === 1 && document.body.classList.remove('modal-open');\n                completer.resolve();\n            });\n            return completer.promise;\n        });\n        return dialogRef;\n    };\n    return Modal;\n}(Modal_));\nModal = __decorate([\n    Injectable(),\n    __metadata(\"design:paramtypes\", [Overlay])\n], Modal);\nexport { Modal };\n//# sourceMappingURL=modal.js.map","/home/travis/build/npmtest/node-npmtest-angular2-modal/node_modules/angular2-modal/plugins/js-native/index.js":"export { Modal } from './modal';\nexport { JSNativeModalContext, JSNativeModalContextBuilder } from './modal-context';\nexport { JSNativeModalRenderer } from './js-native-modal-renderer';\nexport { JSNativePresetBuilder } from './presets/js-native-preset';\nexport { JSNativeModalModule, providers } from './js-native.module';\n//# sourceMappingURL=index.js.map","/home/travis/build/npmtest/node-npmtest-angular2-modal/node_modules/angular2-modal/plugins/js-native/js-native-modal-renderer.js":"var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Injectable } from '@angular/core';\nimport { DROP_IN_TYPE } from 'angular2-modal';\nvar JSNativeModalRenderer = (function () {\n    function JSNativeModalRenderer() {\n    }\n    JSNativeModalRenderer.prototype.render = function (dialog, vcRef) {\n        var result;\n        switch (dialog.context.dialogType) {\n            case DROP_IN_TYPE.alert:\n                window.alert(dialog.context.message);\n                result = true;\n                break;\n            case DROP_IN_TYPE.prompt:\n                result = window.prompt(dialog.context.message, dialog.context.promptDefault);\n                break;\n            case DROP_IN_TYPE.confirm:\n                result = window.confirm(dialog.context.message);\n                break;\n        }\n        dialog.destroy = function () {\n        };\n        if (result === false) {\n            dialog.dismiss();\n        }\n        else {\n            dialog.close(result);\n        }\n        // we need to return ComponentRef<ModalOverlay> but a native dialog does'nt have that\n        // so we resolve an empty promise, the user of this renderer should expect that.\n        return {};\n    };\n    return JSNativeModalRenderer;\n}());\nJSNativeModalRenderer = __decorate([\n    Injectable()\n], JSNativeModalRenderer);\nexport { JSNativeModalRenderer };\n//# sourceMappingURL=js-native-modal-renderer.js.map","/home/travis/build/npmtest/node-npmtest-angular2-modal/node_modules/angular2-modal/plugins/js-native/js-native.module.js":"var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { NgModule } from '@angular/core';\nimport { Modal as BaseModal } from 'angular2-modal';\nimport { Modal } from './modal';\nexport var providers = [\n    { provide: BaseModal, useClass: Modal },\n    { provide: Modal, useClass: Modal }\n];\nvar JSNativeModalModule = (function () {\n    function JSNativeModalModule() {\n    }\n    JSNativeModalModule.getProviders = function () {\n        return providers;\n    };\n    return JSNativeModalModule;\n}());\nJSNativeModalModule = __decorate([\n    NgModule({\n        providers: providers\n    })\n], JSNativeModalModule);\nexport { JSNativeModalModule };\n//# sourceMappingURL=js-native.module.js.map","/home/travis/build/npmtest/node-npmtest-angular2-modal/node_modules/angular2-modal/plugins/js-native/modal-context.js":"var __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { DROP_IN_TYPE, ModalOpenContextBuilder, ModalOpenContext, arrayUnion } from 'angular2-modal';\nvar DEFAULT_SETTERS = [\n    'promptDefault'\n];\nvar JSNativeModalContext = (function (_super) {\n    __extends(JSNativeModalContext, _super);\n    function JSNativeModalContext() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    JSNativeModalContext.prototype.normalize = function () {\n        if (!this.message)\n            this.message = '';\n        if (this.dialogType === undefined)\n            this.dialogType = DROP_IN_TYPE.alert;\n    };\n    return JSNativeModalContext;\n}(ModalOpenContext));\nexport { JSNativeModalContext };\nvar JSNativeModalContextBuilder = (function (_super) {\n    __extends(JSNativeModalContextBuilder, _super);\n    function JSNativeModalContextBuilder(defaultValues, initialSetters, baseType) {\n        if (defaultValues === void 0) { defaultValues = undefined; }\n        if (initialSetters === void 0) { initialSetters = undefined; }\n        if (baseType === void 0) { baseType = undefined; }\n        return _super.call(this, defaultValues || {}, arrayUnion(DEFAULT_SETTERS, initialSetters || []), baseType || JSNativeModalContext) || this;\n    }\n    return JSNativeModalContextBuilder;\n}(ModalOpenContextBuilder));\nexport { JSNativeModalContextBuilder };\n//# sourceMappingURL=modal-context.js.map","/home/travis/build/npmtest/node-npmtest-angular2-modal/node_modules/angular2-modal/plugins/js-native/modal.js":"var __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { Injectable } from '@angular/core';\nimport { Overlay, DROP_IN_TYPE, Modal as Modal_ } from 'angular2-modal';\nimport { JSNativePresetBuilder } from './presets/js-native-preset';\nvar Modal = (function (_super) {\n    __extends(Modal, _super);\n    function Modal(overlay) {\n        return _super.call(this, overlay) || this;\n    }\n    Modal.prototype.alert = function () {\n        return new JSNativePresetBuilder(this, DROP_IN_TYPE.alert);\n    };\n    Modal.prototype.prompt = function () {\n        return new JSNativePresetBuilder(this, DROP_IN_TYPE.prompt);\n    };\n    Modal.prototype.confirm = function () {\n        return new JSNativePresetBuilder(this, DROP_IN_TYPE.confirm);\n    };\n    Modal.prototype.create = function (dialogRef, type, bindings) {\n        return dialogRef;\n    };\n    return Modal;\n}(Modal_));\nModal = __decorate([\n    Injectable(),\n    __metadata(\"design:paramtypes\", [Overlay])\n], Modal);\nexport { Modal };\n//# sourceMappingURL=modal.js.map","/home/travis/build/npmtest/node-npmtest-angular2-modal/node_modules/angular2-modal/plugins/vex/dialog-form-modal.js":"var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { Component, ViewEncapsulation, Input, Output, EventEmitter } from '@angular/core';\nimport { DialogRef } from 'angular2-modal';\n/**\n * A Dialog is a\n */\nvar VEXDialogButtons = (function () {\n    function VEXDialogButtons() {\n        /**\n         * Emitted when a button was clicked\n         * @type {EventEmitter<VEXButtonClickEvent>}\n         */\n        this.onButtonClick = new EventEmitter();\n    }\n    VEXDialogButtons.prototype.onClick = function (btn, $event) {\n        $event.stopPropagation();\n        this.onButtonClick.emit({ btn: btn, $event: $event });\n    };\n    return VEXDialogButtons;\n}());\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Array)\n], VEXDialogButtons.prototype, \"buttons\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], VEXDialogButtons.prototype, \"onButtonClick\", void 0);\nVEXDialogButtons = __decorate([\n    Component({\n        selector: 'vex-dialog-buttons',\n        encapsulation: ViewEncapsulation.None,\n        template: \"<div class=\\\"vex-dialog-buttons\\\">\\n    <button type=\\\"button\\\" \\n         *ngFor=\\\"let btn of buttons;\\\"\\n         [class]=\\\"btn.cssClass\\\"\\n         (click)=\\\"onClick(btn, $event)\\\">{{btn.caption}}</button>\\n</div>\"\n    })\n], VEXDialogButtons);\nexport { VEXDialogButtons };\n/**\n * A Dialog with customized buttons wrapped in a form.\n *\n */\nvar DialogFormModal = (function () {\n    function DialogFormModal(dialog) {\n        this.dialog = dialog;\n        this.context = dialog.context;\n    }\n    DialogFormModal.prototype.onButtonClick = function ($event) {\n        $event.btn.onClick(this, $event.$event);\n    };\n    return DialogFormModal;\n}());\nDialogFormModal = __decorate([\n    Component({\n        selector: 'modal-dialog',\n        encapsulation: ViewEncapsulation.None,\n        template: \"<form class=\\\"vex-dialog-form\\\">\\n    <template [swapCmp]=\\\"context.content\\\"></template>\\n    <vex-dialog-buttons [buttons]=\\\"context.buttons\\\"\\n                        (onButtonClick)=\\\"onButtonClick($event)\\\"></vex-dialog-buttons>\\n</form>\"\n    }),\n    __metadata(\"design:paramtypes\", [DialogRef])\n], DialogFormModal);\nexport { DialogFormModal };\nvar FormDropIn = (function () {\n    function FormDropIn(dialog) {\n        this.dialog = dialog;\n        this.context = dialog.context;\n    }\n    return FormDropIn;\n}());\nFormDropIn = __decorate([\n    Component({\n        selector: 'drop-in-dialog',\n        encapsulation: ViewEncapsulation.None,\n        template: \"<div class=\\\"vex-dialog-message\\\">{{context.message}}</div>\\n <div *ngIf=\\\"context.showInput\\\" class=\\\"vex-dialog-input\\\">\\n   <input #input\\n          autofocus\\n          name=\\\"vex\\\" \\n          type=\\\"text\\\" \\n          class=\\\"vex-dialog-prompt-input\\\"\\n           (change)=\\\"context.defaultResult = input.value\\\" \\n          placeholder=\\\"{{context.placeholder}}\\\">\\n </div>\\n <div *ngIf=\\\"context.showCloseButton\\\" \\n      [class]=\\\"context.closeClassName\\\"\\n      (click)=\\\"dialog.dismiss()\\\"></div>\"\n    }),\n    __metadata(\"design:paramtypes\", [DialogRef])\n], FormDropIn);\nexport { FormDropIn };\n//# sourceMappingURL=dialog-form-modal.js.map","/home/travis/build/npmtest/node-npmtest-angular2-modal/node_modules/angular2-modal/plugins/vex/index.js":"export { Modal } from './modal';\nexport { VEXModalContext, VEXModalContextBuilder } from './modal-context';\nexport { DropInPreset, DropInPresetBuilder } from './presets/dropin-preset';\nexport { DialogFormModal, FormDropIn, VEXDialogButtons } from './dialog-form-modal';\nexport { DialogPreset, DialogPresetBuilder } from './presets/dialog-preset';\nexport { VexModalModule, providers } from './vex.module';\n//# sourceMappingURL=index.js.map","/home/travis/build/npmtest/node-npmtest-angular2-modal/node_modules/angular2-modal/plugins/vex/modal-context.js":"var __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { ModalOpenContext, ModalOpenContextBuilder, privateKey, extend, arrayUnion } from 'angular2-modal';\nvar DEFAULT_VALUES = {\n    className: 'default',\n    overlayClassName: 'vex-overlay',\n    contentClassName: 'vex-content',\n    closeClassName: 'vex-close'\n};\nvar DEFAULT_SETTERS = [\n    'className',\n    'overlayClassName',\n    'contentClassName',\n    'closeClassName',\n    'showCloseButton'\n];\nvar VEXModalContext = (function (_super) {\n    __extends(VEXModalContext, _super);\n    function VEXModalContext() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    VEXModalContext.prototype.normalize = function () {\n        if (!this.className) {\n            this.className = DEFAULT_VALUES.className;\n        }\n        if (!this.overlayClassName) {\n            this.overlayClassName = DEFAULT_VALUES.overlayClassName;\n        }\n        if (!this.contentClassName) {\n            this.contentClassName = DEFAULT_VALUES.contentClassName;\n        }\n        if (!this.closeClassName) {\n            this.closeClassName = DEFAULT_VALUES.closeClassName;\n        }\n        _super.prototype.normalize.call(this);\n    };\n    return VEXModalContext;\n}(ModalOpenContext));\nexport { VEXModalContext };\nvar VEXModalContextBuilder = (function (_super) {\n    __extends(VEXModalContextBuilder, _super);\n    function VEXModalContextBuilder(defaultValues, initialSetters, baseType) {\n        if (defaultValues === void 0) { defaultValues = undefined; }\n        if (initialSetters === void 0) { initialSetters = undefined; }\n        if (baseType === void 0) { baseType = undefined; }\n        return _super.call(this, extend(DEFAULT_VALUES, defaultValues || {}), arrayUnion(DEFAULT_SETTERS, initialSetters || []), baseType || VEXModalContext // https://github.com/Microsoft/TypeScript/issues/7234\n        ) || this;\n    }\n    /**\n     *\n     * @aliasFor isBlocking\n     */\n    VEXModalContextBuilder.prototype.overlayClosesOnClick = function (value) {\n        this[privateKey('isBlocking')] = !value;\n        return this;\n    };\n    return VEXModalContextBuilder;\n}(ModalOpenContextBuilder));\nexport { VEXModalContextBuilder };\n//# sourceMappingURL=modal-context.js.map","/home/travis/build/npmtest/node-npmtest-angular2-modal/node_modules/angular2-modal/plugins/vex/modal.js":"var __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport 'rxjs/add/operator/first';\nimport 'rxjs/add/operator/combineLatest';\nimport { Injectable } from '@angular/core';\nimport { Overlay, DROP_IN_TYPE, Modal as Modal_, CSSBackdrop, CSSDialogContainer, PromiseCompleter } from 'angular2-modal';\nimport { DropInPresetBuilder } from './presets/dropin-preset';\nvar Modal = (function (_super) {\n    __extends(Modal, _super);\n    function Modal(overlay) {\n        return _super.call(this, overlay) || this;\n    }\n    Modal.prototype.alert = function () {\n        return new DropInPresetBuilder(this, DROP_IN_TYPE.alert, { isBlocking: false });\n    };\n    Modal.prototype.prompt = function () {\n        return new DropInPresetBuilder(this, DROP_IN_TYPE.prompt, {\n            isBlocking: true,\n            keyboard: null\n        });\n    };\n    Modal.prototype.confirm = function () {\n        return new DropInPresetBuilder(this, DROP_IN_TYPE.confirm, {\n            isBlocking: true,\n            keyboard: null\n        });\n    };\n    Modal.prototype.create = function (dialogRef, content, bindings) {\n        var _this = this;\n        var backdropRef = this.createBackdrop(dialogRef, CSSBackdrop);\n        var containerRef = this.createContainer(dialogRef, CSSDialogContainer, content, bindings);\n        var overlay = dialogRef.overlayRef.instance;\n        var backdrop = backdropRef.instance;\n        var container = containerRef.instance;\n        dialogRef.inElement ? overlay.insideElement() : overlay.fullscreen();\n        // add body class if this is the only dialog in the stack\n        if (!document.body.classList.contains('vex-open')) {\n            document.body.classList.add('vex-open');\n        }\n        overlay.addClass(\"vex vex-theme-\" + dialogRef.context.className);\n        backdrop.addClass('vex-overlay');\n        container.addClass(dialogRef.context.contentClassName);\n        container.setStyle('display', 'block');\n        if (dialogRef.inElement) {\n            overlay.setStyle('padding', '0');\n            container.setStyle('margin-top', '20px');\n        }\n        if (containerRef.location.nativeElement) {\n            containerRef.location.nativeElement.focus();\n        }\n        if (dialogRef.context.className === 'bottom-right-corner') {\n            overlay.setStyle('overflow-y', 'hidden');\n            container.setStyle('position', 'absolute');\n        }\n        overlay.beforeDestroy(function () {\n            overlay.addClass('vex-closing');\n            var completer = new PromiseCompleter();\n            var animationEnd$ = container.myAnimationEnd$();\n            if (dialogRef.context.className !== 'bottom-right-corner') {\n                animationEnd$ = animationEnd$.combineLatest(backdrop.myAnimationEnd$(), function (s1, s2) { return [s1, s2]; });\n            }\n            animationEnd$.subscribe(function (sources) {\n                _this.overlay.groupStackLength(dialogRef) === 1 && document.body.classList.remove('vex-open');\n                completer.resolve();\n            });\n            return completer.promise;\n        });\n        overlay.setClickBoundary(containerRef.location.nativeElement);\n        return dialogRef;\n    };\n    return Modal;\n}(Modal_));\nModal = __decorate([\n    Injectable(),\n    __metadata(\"design:paramtypes\", [Overlay])\n], Modal);\nexport { Modal };\n//# sourceMappingURL=modal.js.map","/home/travis/build/npmtest/node-npmtest-angular2-modal/node_modules/angular2-modal/plugins/vex/vex.module.js":"var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ModalModule, Modal as BaseModal } from 'angular2-modal';\nimport { Modal } from './modal';\nimport { DialogFormModal, FormDropIn, VEXDialogButtons } from './dialog-form-modal';\nexport var providers = [\n    { provide: BaseModal, useClass: Modal },\n    { provide: Modal, useClass: Modal }\n];\nvar VexModalModule = (function () {\n    function VexModalModule() {\n    }\n    VexModalModule.getProviders = function () {\n        return providers;\n    };\n    return VexModalModule;\n}());\nVexModalModule = __decorate([\n    NgModule({\n        imports: [ModalModule, CommonModule],\n        declarations: [\n            VEXDialogButtons,\n            FormDropIn,\n            DialogFormModal\n        ],\n        providers: providers,\n        entryComponents: [\n            DialogFormModal,\n            FormDropIn\n        ]\n    })\n], VexModalModule);\nexport { VexModalModule };\n//# sourceMappingURL=vex.module.js.map","/home/travis/build/npmtest/node-npmtest-angular2-modal/node_modules/angular2-modal/plugins/bootstrap/presets/message-modal-preset.js":"var __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { privateKey, setAssignAlias, extend, arrayUnion } from 'angular2-modal';\nimport { BSMessageModal } from '../message-modal.component';\nimport { BSModalContextBuilder } from '../modal-context';\nvar DEFAULT_VALUES = {\n    component: BSMessageModal,\n    headerClass: 'modal-header',\n    bodyClass: 'modal-body',\n    footerClass: 'modal-footer'\n};\nvar DEFAULT_SETTERS = [\n    'headerClass',\n    'title',\n    'titleHtml',\n    'bodyClass',\n    'footerClass'\n];\n/**\n * A Preset representing the configuration needed to open MessageModal.\n * This is an abstract implementation with no concrete behaviour.\n * Use derived implementation.\n */\nvar MessageModalPresetBuilder = (function (_super) {\n    __extends(MessageModalPresetBuilder, _super);\n    function MessageModalPresetBuilder(defaultValues, initialSetters, baseType) {\n        if (defaultValues === void 0) { defaultValues = undefined; }\n        if (initialSetters === void 0) { initialSetters = undefined; }\n        if (baseType === void 0) { baseType = undefined; }\n        var _this = _super.call(this, extend(extend({ buttons: [] }, DEFAULT_VALUES), defaultValues || {}), arrayUnion(DEFAULT_SETTERS, initialSetters || []), baseType) || this;\n        setAssignAlias(_this, 'body', 'message', true);\n        return _this;\n    }\n    MessageModalPresetBuilder.prototype.addButton = function (css, caption, onClick) {\n        var btn = {\n            cssClass: css,\n            caption: caption,\n            onClick: onClick\n        };\n        var key = privateKey('buttons');\n        this[key].push(btn);\n        return this;\n    };\n    return MessageModalPresetBuilder;\n}(BSModalContextBuilder));\nexport { MessageModalPresetBuilder };\n//# sourceMappingURL=message-modal-preset.js.map","/home/travis/build/npmtest/node-npmtest-angular2-modal/node_modules/angular2-modal/plugins/bootstrap/presets/one-button-preset.js":"var __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { extend } from 'angular2-modal';\nimport { MessageModalPresetBuilder } from './message-modal-preset';\n/**\n * A Preset for a classic 1 button modal window.\n */\nvar OneButtonPresetBuilder = (function (_super) {\n    __extends(OneButtonPresetBuilder, _super);\n    function OneButtonPresetBuilder(modal, defaultValues) {\n        if (defaultValues === void 0) { defaultValues = undefined; }\n        return _super.call(this, extend({\n            modal: modal,\n            okBtn: 'OK',\n            okBtnClass: 'btn btn-primary'\n        }, defaultValues || {}), [\n            'okBtn',\n            'okBtnClass'\n        ]) || this;\n    }\n    OneButtonPresetBuilder.prototype.$$beforeOpen = function (config) {\n        this.addButton(config.okBtnClass, config.okBtn, function (cmp, $event) { return cmp.dialog.close(true); });\n        return _super.prototype.$$beforeOpen.call(this, config);\n    };\n    return OneButtonPresetBuilder;\n}(MessageModalPresetBuilder));\nexport { OneButtonPresetBuilder };\n//# sourceMappingURL=one-button-preset.js.map","/home/travis/build/npmtest/node-npmtest-angular2-modal/node_modules/angular2-modal/plugins/bootstrap/presets/two-button-preset.js":"var __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { extend, arrayUnion } from 'angular2-modal';\nimport { MessageModalPresetBuilder } from './message-modal-preset';\n/** Common two button preset */\nvar AbstractTwoButtonPresetBuilder = (function (_super) {\n    __extends(AbstractTwoButtonPresetBuilder, _super);\n    function AbstractTwoButtonPresetBuilder(modal, defaultValues, initialSetters) {\n        if (defaultValues === void 0) { defaultValues = undefined; }\n        if (initialSetters === void 0) { initialSetters = []; }\n        return _super.call(this, extend({\n            modal: modal,\n            okBtn: 'OK',\n            okBtnClass: 'btn btn-primary',\n            cancelBtn: 'Cancel',\n            cancelBtnClass: 'btn btn-default'\n        }, defaultValues || {}), arrayUnion([\n            'okBtn',\n            'okBtnClass',\n            'cancelBtn',\n            'cancelBtnClass',\n        ], initialSetters)) || this;\n    }\n    AbstractTwoButtonPresetBuilder.prototype.$$beforeOpen = function (config) {\n        this.addButton(config.cancelBtnClass, config.cancelBtn, function (cmp, $event) { return cmp.dialog.dismiss(); });\n        return _super.prototype.$$beforeOpen.call(this, config);\n    };\n    return AbstractTwoButtonPresetBuilder;\n}(MessageModalPresetBuilder));\nexport { AbstractTwoButtonPresetBuilder };\n/**\n * A Preset for a classic 2 button modal window.\n */\nvar TwoButtonPresetBuilder = (function (_super) {\n    __extends(TwoButtonPresetBuilder, _super);\n    function TwoButtonPresetBuilder(modal, defaultValues) {\n        if (defaultValues === void 0) { defaultValues = undefined; }\n        return _super.call(this, modal, defaultValues) || this;\n    }\n    TwoButtonPresetBuilder.prototype.$$beforeOpen = function (config) {\n        this.addButton(config.okBtnClass, config.okBtn, function (cmp, $event) { return cmp.dialog.close(true); });\n        return _super.prototype.$$beforeOpen.call(this, config);\n    };\n    return TwoButtonPresetBuilder;\n}(AbstractTwoButtonPresetBuilder));\nexport { TwoButtonPresetBuilder };\nvar PromptPresetBuilder = (function (_super) {\n    __extends(PromptPresetBuilder, _super);\n    function PromptPresetBuilder(modal, defaultValues) {\n        if (defaultValues === void 0) { defaultValues = undefined; }\n        return _super.call(this, modal, extend({ showInput: true, defaultValue: '' }, defaultValues || {}), ['placeholder', 'defaultValue']) || this;\n    }\n    PromptPresetBuilder.prototype.$$beforeOpen = function (config) {\n        this.addButton(config.okBtnClass, config.okBtn, function (cmp, $event) {\n            return cmp.dialog.close(cmp.dialog.context.defaultValue);\n        });\n        return _super.prototype.$$beforeOpen.call(this, config);\n    };\n    return PromptPresetBuilder;\n}(AbstractTwoButtonPresetBuilder));\nexport { PromptPresetBuilder };\n//# sourceMappingURL=two-button-preset.js.map","/home/travis/build/npmtest/node-npmtest-angular2-modal/node_modules/angular2-modal/plugins/js-native/presets/js-native-preset.js":"var __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Modal } from '../modal';\nimport { JSNativeModalContextBuilder } from '../modal-context';\nimport { JSNativeModalRenderer } from '../js-native-modal-renderer';\nvar JSNativePresetBuilder = (function (_super) {\n    __extends(JSNativePresetBuilder, _super);\n    function JSNativePresetBuilder(modal, dialogType) {\n        return _super.call(this, { modal: modal, dialogType: dialogType }) || this;\n    }\n    /**\n     * Hook to alter config and return bindings.\n     * @param config\n     */\n    JSNativePresetBuilder.prototype.$$beforeOpen = function (config) {\n        return [];\n    };\n    /**\n     * Open a modal window based on the configuration of this config instance.\n     * @param viewContainer If set opens the modal inside the supplied viewContainer\n     * @returns Promise<DialogRef>\n     */\n    JSNativePresetBuilder.prototype.open = function (viewContainer) {\n        var context = this.toJSON();\n        if (!(context.modal instanceof Modal)) {\n            return Promise.reject(new Error('Configuration Error: modal service not set.'));\n        }\n        var overlayConfig = {\n            context: context,\n            renderer: new JSNativeModalRenderer(),\n            viewContainer: viewContainer,\n            bindings: typeof this.$$beforeOpen === 'function' && this.$$beforeOpen(context)\n        };\n        return context.modal.open(context.component, overlayConfig);\n    };\n    return JSNativePresetBuilder;\n}(JSNativeModalContextBuilder));\nexport { JSNativePresetBuilder };\n//# sourceMappingURL=js-native-preset.js.map","/home/travis/build/npmtest/node-npmtest-angular2-modal/node_modules/angular2-modal/plugins/vex/presets/dialog-preset.js":"var __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { privateKey, extend, arrayUnion } from 'angular2-modal';\nimport { VEXModalContext, VEXModalContextBuilder } from '../modal-context';\nimport { DialogFormModal as component } from '../dialog-form-modal';\nvar DEFAULT_SETTERS = [\n    'content'\n];\n/**\n * Data definition\n */\nvar DialogPreset = (function (_super) {\n    __extends(DialogPreset, _super);\n    function DialogPreset() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return DialogPreset;\n}(VEXModalContext));\nexport { DialogPreset };\n/**\n * A Preset representing the configuration needed to open MessageModal.\n * This is an abstract implementation with no concrete behaviour.\n * Use derived implementation.\n */\nvar DialogPresetBuilder = (function (_super) {\n    __extends(DialogPresetBuilder, _super);\n    function DialogPresetBuilder(modal, defaultValues, initialSetters, baseType) {\n        if (defaultValues === void 0) { defaultValues = undefined; }\n        if (initialSetters === void 0) { initialSetters = undefined; }\n        if (baseType === void 0) { baseType = undefined; }\n        return _super.call(this, extend({ modal: modal, component: component, buttons: [], defaultResult: true }, defaultValues || {}), arrayUnion(DEFAULT_SETTERS, initialSetters || []), baseType || DialogPreset // https://github.com/Microsoft/TypeScript/issues/7234\n        ) || this;\n    }\n    DialogPresetBuilder.prototype.addButton = function (css, caption, onClick) {\n        var btn = {\n            cssClass: css,\n            caption: caption,\n            onClick: onClick\n        };\n        var key = privateKey('buttons');\n        this[key].push(btn);\n        return this;\n    };\n    DialogPresetBuilder.prototype.addOkButton = function (text) {\n        if (text === void 0) { text = 'OK'; }\n        this.addButton('vex-dialog-button-primary vex-dialog-button vex-first', text, function (cmp, $event) { return cmp.dialog.close(cmp.dialog.context.defaultResult); });\n        return this;\n    };\n    DialogPresetBuilder.prototype.addCancelButton = function (text) {\n        if (text === void 0) { text = 'CANCEL'; }\n        this.addButton('vex-dialog-button-secondary vex-dialog-button vex-last', text, function (cmp, $event) { return cmp.dialog.dismiss(); });\n        return this;\n    };\n    return DialogPresetBuilder;\n}(VEXModalContextBuilder));\nexport { DialogPresetBuilder };\n//# sourceMappingURL=dialog-preset.js.map","/home/travis/build/npmtest/node-npmtest-angular2-modal/node_modules/angular2-modal/plugins/vex/presets/dropin-preset.js":"var __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { DROP_IN_TYPE, extend } from 'angular2-modal';\nimport { DialogFormModal as component, FormDropIn as content } from '../dialog-form-modal';\nimport { DialogPreset, DialogPresetBuilder } from './dialog-preset';\nvar DEFAULT_VALUES = {\n    component: component,\n    content: content,\n    okBtn: 'OK',\n    cancelBtn: 'Cancel'\n};\nvar DEFAULT_SETTERS = [\n    'okBtn',\n    'cancelBtn',\n    'placeholder'\n];\n/**\n * Data definition\n */\nvar DropInPreset = (function (_super) {\n    __extends(DropInPreset, _super);\n    function DropInPreset() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Object.defineProperty(DropInPreset.prototype, \"showInput\", {\n        get: function () {\n            return this.dropInType === DROP_IN_TYPE.prompt;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return DropInPreset;\n}(DialogPreset));\nexport { DropInPreset };\n/**\n * A Preset representing all 3 drop ins (alert, prompt, confirm)\n */\nvar DropInPresetBuilder = (function (_super) {\n    __extends(DropInPresetBuilder, _super);\n    function DropInPresetBuilder(modal, dropInType, defaultValues) {\n        if (defaultValues === void 0) { defaultValues = undefined; }\n        return _super.call(this, modal, extend(extend({ modal: modal, dropInType: dropInType }, DEFAULT_VALUES), defaultValues || {}), DEFAULT_SETTERS, DropInPreset) || this;\n    }\n    DropInPresetBuilder.prototype.$$beforeOpen = function (config) {\n        if (config.okBtn) {\n            this.addOkButton(config.okBtn);\n        }\n        switch (config.dropInType) {\n            case DROP_IN_TYPE.prompt:\n                config.defaultResult = undefined;\n            case DROP_IN_TYPE.confirm:\n                if (config.cancelBtn) {\n                    this.addCancelButton(config.cancelBtn);\n                }\n                break;\n        }\n        return _super.prototype.$$beforeOpen.call(this, config);\n    };\n    return DropInPresetBuilder;\n}(DialogPresetBuilder));\nexport { DropInPresetBuilder };\n//# sourceMappingURL=dropin-preset.js.map"}